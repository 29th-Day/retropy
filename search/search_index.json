{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>THIS DOCUMENTATION IS A WORK IN PROGRESS.</p> <p>EXAMPLES AND EXPLANATIONS ARE EITHER ABSENT OR DO NOT ALIGN WITH THE ACTUAL CODE.</p> <p>https://www.markdownguide.org/basic-syntax/</p>"},{"location":"#welcome-to-the-retropy-documentation","title":"Welcome to the RetroPy documentation","text":"<p>RetroPy is a libretro frontend (NOT CORE) written in Python. It is meant bridge the gap between fast, accurate, well-implemented, and tested emulators and Python.</p>"},{"location":"#why-retropy","title":"Why RetroPy?","text":"<p>The idea behind RetroPy is to enable easy integration of video games into machine learning pipelines. Especially for reinforcement learning, having access to thousands of environments with wide ranging complexity and high level of control is incredibly valuable. Video games have historically served as valuable tools for validating and visualizing machine learning algorithms and their decision-making processes. Additionally, they act as an engaging and motivating bridge to attract new talent and interest to the field of AI.</p>"},{"location":"#why-libretro","title":"Why libretro?","text":"<p>\"Libretro is a simple but powerful development interface that allows for the easy creation of emulators, games and multimedia applications that can plug straight into any libretro-compatible frontend. This development interface is open to others so that they can run these pluggable emulator and game cores also in their own programs or devices.\"</p> <p>libretro.org</p> <p>TL;DR: Libretro is a common API to interact with emulators.</p>"},{"location":"how-to-guides/","title":"How-to Guides","text":""},{"location":"how-to-guides/#libretro-api","title":"Libretro API","text":"<p>The most important reference is the <code>libretro.h</code> header file. It contains all information about the workings and expectations of the API. It can be found on the official repository of libretro and open-source cores.</p> <p>A basic understanding of C (and ctypes) is likely sufficient.</p> <p>When ported into the Python wrapper, every objects name likely deviate from the C name, but the original name should be preserved in the objects docstring.</p>"},{"location":"how-to-guides/#custom-frontend","title":"Custom frontend","text":"<p>Custom frontends can be created by two ways</p>"},{"location":"how-to-guides/#encapsulating-the-retropy-class","title":"Encapsulating the <code>RetroPy</code> class","text":"<p>The simple way.</p> <p>It involves create additional abstraction on top of the class. The implementations are left as is and only additional functionality is added.</p> <p>This should be done when no changes to the existing implementation are necessary.</p>"},{"location":"how-to-guides/#inheriting-the-retropy-class","title":"Inheriting the <code>RetroPy</code> class.","text":"<p>The complex way.</p> <p>It involves modifying existing behavior of the implementations. Especially useful if cores have features beyond the standard API. </p>"},{"location":"installation/","title":"Installation","text":"<p>Supported python versions: ... Supported OS: ...</p>"},{"location":"installation/#pip","title":"pip","text":"<pre><code>pip install retropy\n</code></pre> <p>By default, retropy does not have any external dependencies. However, some additional features are accessable if other packages are available<sup>1</sup>.</p> <pre><code>pip install retropy[numpy]  # retropy + numpy\npip install retropy[gym]    # retropy + numpy + gymnasium\npip install retropy[pygame] # retropy + numpy + pygame\npip install retropy[pyglet] # retropy + numpy + pyglet\npip install retropy[dev]    # retropy + dev dependencies\n</code></pre>"},{"location":"installation/#releases","title":"Releases","text":"<p>Every release is archived and can be downloaded from Releases.</p>"},{"location":"installation/#nightly-version","title":"Nightly Version","text":"<p>The current development version can be download via <pre><code>git clone https://github.com/29th-Day/retropy.git\n</code></pre></p> <ol> <li> <p><code>FeatureNotAvailable</code> will be raised if unavailable feature is called\u00a0\u21a9</p> </li> </ol>"},{"location":"mkdocs/","title":"mkdocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>retropy<ul> <li>core<ul> <li>audio<ul> <li>microphone</li> <li>midi</li> </ul> </li> <li>callbacks</li> <li>device<ul> <li>camera</li> <li>controller</li> <li>keyboard</li> <li>location</li> <li>rumble</li> <li>sensor</li> </ul> </li> <li>environment</li> <li>game<ul> <li>disk</li> </ul> </li> <li>log</li> <li>memory</li> <li>message</li> <li>network</li> <li>options<ul> <li>v1</li> <li>v2</li> </ul> </li> <li>os<ul> <li>localization</li> <li>power</li> <li>savestate</li> <li>subsystem</li> <li>system</li> <li>vfs</li> </ul> </li> <li>performance<ul> <li>fastforward</li> <li>frametime</li> <li>perf</li> <li>throttle</li> </ul> </li> <li>renderer<ul> <li>framebuffer</li> <li>hw</li> </ul> </li> <li>retro</li> <li>skeleton</li> </ul> </li> <li>frontends<ul> <li>gym<ul> <li>gym</li> <li>wrapper</li> </ul> </li> <li>pygame</li> <li>pyglet</li> </ul> </li> <li>utils<ul> <li>cheats</li> <li>exceptions</li> <li>input<ul> <li>base</li> <li>gamepad</li> </ul> </li> <li>memory</li> <li>ptr_array</li> <li>savestate</li> <li>video</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/retropy/","title":"retropy","text":"<p>Call libretro cores from python.</p>"},{"location":"reference/retropy/core/","title":"core","text":"<p>Module contains wrapper and implementations of the C API.</p> <p>Most of the documentation can be found in <code>libretro.h</code>. If something is not documented here, look into the header file.</p>"},{"location":"reference/retropy/core/callbacks/","title":"callbacks","text":""},{"location":"reference/retropy/core/callbacks/#retropy.core.callbacks.audio_sample_batch_t","title":"<code>audio_sample_batch_t = CFUNCTYPE(c_size_t, POINTER(c_int16), c_size_t)</code>  <code>module-attribute</code>","text":"<p>retro_audio_sample_batch_t</p>"},{"location":"reference/retropy/core/callbacks/#retropy.core.callbacks.audio_sample_t","title":"<code>audio_sample_t = CFUNCTYPE(None, c_int16, c_int16)</code>  <code>module-attribute</code>","text":"<p>retro_audio_sample_t</p>"},{"location":"reference/retropy/core/callbacks/#retropy.core.callbacks.environment_t","title":"<code>environment_t = CFUNCTYPE(c_bool, c_uint, c_void_p)</code>  <code>module-attribute</code>","text":"<p>retro_environment_t</p>"},{"location":"reference/retropy/core/callbacks/#retropy.core.callbacks.input_poll_t","title":"<code>input_poll_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_input_poll_t</p>"},{"location":"reference/retropy/core/callbacks/#retropy.core.callbacks.input_state_t","title":"<code>input_state_t = CFUNCTYPE(c_int16, c_uint, c_uint, c_uint, c_uint)</code>  <code>module-attribute</code>","text":"<p>retro_input_poll_t</p>"},{"location":"reference/retropy/core/callbacks/#retropy.core.callbacks.video_refresh_t","title":"<code>video_refresh_t = CFUNCTYPE(None, c_void_p, c_uint, c_uint, c_size_t)</code>  <code>module-attribute</code>","text":"<p>retro_video_refresh_t</p>"},{"location":"reference/retropy/core/environment/","title":"environment","text":""},{"location":"reference/retropy/core/environment/#retropy.core.environment.CoreVariable","title":"<code>CoreVariable</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_variable</p> Source code in <code>src/retropy/core/environment.py</code> <pre><code>class CoreVariable(Structure):\n    \"\"\"retro_variable\"\"\"\n\n    _fields_ = [(\"key\", c_char_p), (\"value\", c_char_p)]\n\n    key: bytes\n    value: bytes\n</code></pre>"},{"location":"reference/retropy/core/environment/#retropy.core.environment.EnvironmentCommand","title":"<code>EnvironmentCommand</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>RETRO_ENVIRONMENT_</p> Source code in <code>src/retropy/core/environment.py</code> <pre><code>class EnvironmentCommand(IntEnum):\n    \"\"\"RETRO_ENVIRONMENT_\"\"\"\n\n    SET_ROTATION = 1\n    GET_OVERSCAN = 2\n    GET_CAN_DUPE = 3\n    SET_MESSAGE = 6\n    SHUTDOWN = 7\n    SET_PERFORMANCE_LEVEL = 8\n    GET_SYSTEM_DIRECTORY = 9\n    SET_PIXEL_FORMAT = 10\n    SET_INPUT_DESCRIPTORS = 11\n    SET_KEYBOARD_CALLBACK = 12\n    SET_DISK_CONTROL_INTERFACE = 13\n    SET_HW_RENDER = 14\n    GET_VARIABLE = 15\n    SET_VARIABLES = 16\n    GET_VARIABLE_UPDATE = 17\n    SET_SUPPORT_NO_GAME = 18\n    GET_LIBRETRO_PATH = 19\n    SET_FRAME_TIME_CALLBACK = 21\n    SET_AUDIO_CALLBACK = 22\n    GET_RUMBLE_INTERFACE = 23\n    GET_INPUT_DEVICE_CAPABILITIES = 24\n    GET_SENSOR_INTERFACE = 25 | EXPERIMENTAL\n    GET_CAMERA_INTERFACE = 26 | EXPERIMENTAL\n    GET_LOG_INTERFACE = 27\n    GET_PERF_INTERFACE = 28\n    GET_LOCATION_INTERFACE = 29\n    # GET_CONTENT_DIRECTORY = 30 # deprecated name\n    GET_CORE_ASSETS_DIRECTORY = 30\n    GET_SAVE_DIRECTORY = 31\n    SET_SYSTEM_AV_INFO = 32\n    SET_PROC_ADDRESS_CALLBACK = 33\n    SET_SUBSYSTEM_INFO = 34\n    SET_CONTROLLER_INFO = 35\n    SET_MEMORY_MAPS = 36 | EXPERIMENTAL\n    SET_GEOMETRY = 37\n    GET_USERNAME = 38\n    GET_LANGUAGE = 39\n    GET_CURRENT_SOFTWARE_FRAMEBUFFER = 40 | EXPERIMENTAL\n    GET_HW_RENDER_INTERFACE = 41 | EXPERIMENTAL\n    SET_SUPPORT_ACHIEVEMENTS = 42 | EXPERIMENTAL\n    SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE = 43 | EXPERIMENTAL\n    SET_SERIALIZATION_QUIRKS = 44\n    SET_HW_SHARED_CONTEXT = 44 | EXPERIMENTAL\n    GET_VFS_INTERFACE = 45 | EXPERIMENTAL\n    GET_LED_INTERFACE = 46 | EXPERIMENTAL\n    GET_AUDIO_VIDEO_ENABLE = 47 | EXPERIMENTAL\n    GET_MIDI_INTERFACE = 48 | EXPERIMENTAL\n    GET_FASTFORWARDING = 49 | EXPERIMENTAL\n    GET_TARGET_REFRESH_RATE = 50 | EXPERIMENTAL\n    GET_INPUT_BITMASKS = 51 | EXPERIMENTAL\n    GET_CORE_OPTIONS_VERSION = 52\n    SET_CORE_OPTIONS = 53\n    SET_CORE_OPTIONS_INTL = 54\n    SET_CORE_OPTIONS_DISPLAY = 55\n    GET_PREFERRED_HW_RENDER = 56\n    GET_DISK_CONTROL_INTERFACE_VERSION = 57\n    SET_DISK_CONTROL_EXT_INTERFACE = 58\n    GET_MESSAGE_INTERFACE_VERSION = 59\n    SET_MESSAGE_EXT = 60\n    GET_INPUT_MAX_USERS = 61\n    SET_AUDIO_BUFFER_STATUS_CALLBACK = 62\n    SET_MINIMUM_AUDIO_LATENCY = 63\n    SET_FASTFORWARDING_OVERRIDE = 64\n    SET_CONTENT_INFO_OVERRIDE = 65\n    GET_GAME_INFO_EXT = 66\n    SET_CORE_OPTIONS_V2 = 67\n    SET_CORE_OPTIONS_V2_INTL = 68\n    SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK = 69\n    SET_VARIABLE = 70\n    GET_THROTTLE_STATE = 71 | EXPERIMENTAL\n    GET_SAVESTATE_CONTEXT = 72 | EXPERIMENTAL\n    GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT = 73 | EXPERIMENTAL\n    GET_JIT_CAPABLE = 74\n    GET_MICROPHONE_INTERFACE = 75 | EXPERIMENTAL\n    GET_DEVICE_POWER = 77 | EXPERIMENTAL\n    SET_NETPACKET_INTERFACE = 78\n\n    @classmethod\n    def _missing_(cls, value):\n        \"\"\"Returns following element if not present in enum\"\"\"\n        return cls.UNKNOWN\n</code></pre>"},{"location":"reference/retropy/core/log/","title":"log","text":""},{"location":"reference/retropy/core/log/#retropy.core.log.log_printf_t","title":"<code>log_printf_t = CFUNCTYPE(None, c_int32, c_char_p, c_char_p, c_char_p)</code>  <code>module-attribute</code>","text":"<p>retro_log_printf_t</p>"},{"location":"reference/retropy/core/log/#retropy.core.log.LogCallback","title":"<code>LogCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_log_callback</p> Source code in <code>src/retropy/core/log.py</code> <pre><code>class LogCallback(Structure):\n    \"\"\"retro_log_callback\"\"\"\n\n    _fields_ = [\n        (\"log\", log_printf_t),\n    ]\n\n    log: Callable[[int, bytes, Any], None]\n</code></pre>"},{"location":"reference/retropy/core/log/#retropy.core.log.LogLevel","title":"<code>LogLevel</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RETRO_LOG_LEVEL</p> Source code in <code>src/retropy/core/log.py</code> <pre><code>class LogLevel(Enum):\n    \"\"\"RETRO_LOG_LEVEL\"\"\"\n\n    DEBUG = 0\n    INFO = 1\n    WARN = 2\n    ERROR = 3\n</code></pre>"},{"location":"reference/retropy/core/memory/","title":"memory","text":""},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryDescriptor","title":"<code>MemoryDescriptor</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_memory_descriptor</p> Source code in <code>src/retropy/core/memory.py</code> <pre><code>class MemoryDescriptor(Structure):\n    \"\"\"retro_memory_descriptor\"\"\"\n\n    _fields_ = [\n        (\"flags\", c_uint64),\n        (\"ptr\", c_void_p),\n        (\"offset\", c_size_t),\n        (\"start\", c_size_t),\n        (\"select\", c_size_t),\n        (\"disconnect\", c_size_t),\n        (\"len\", c_size_t),\n        (\"addrspace\", c_char_p),\n    ]\n\n    flags: int\n    ptr: c_void_p\n    offset: int\n    start: int\n    select: int\n    disconnect: int\n    len: int\n    addrspace: bytes\n\n    def __repr__(self) -&gt; str:\n        return str(\n            {\n                \"flags\": MemoryFlags(self.flags),\n                \"ptr\": f\"0x{self.ptr:08X}\",\n                \"offset\": f\"0x{self.offset:08X}\",\n                \"start\": f\"0x{self.start:08X}\",\n                \"select\": f\"0x{self.select:08X}\",\n                \"disconnect\": self.disconnect,\n                \"len\": f\"0x{self.len:08X}\",\n                \"addrspace\": self.addrspace\n                if not self.addrspace\n                else self.addrspace.decode(),\n            }\n        )\n</code></pre>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryFlags","title":"<code>MemoryFlags</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>RETRO_MEMDESC_</p> Source code in <code>src/retropy/core/memory.py</code> <pre><code>class MemoryFlags(IntFlag):\n    \"\"\"RETRO_MEMDESC_\"\"\"\n\n    CONST = 1 &lt;&lt; 0\n    BIGENDIAN = 1 &lt;&lt; 1\n    SYSTEM_RAM = 1 &lt;&lt; 2\n    SAVE_RAM = 1 &lt;&lt; 3\n    VIDEO_RAM = 1 &lt;&lt; 4\n    ALIGN_2 = 1 &lt;&lt; 16\n    ALIGN_4 = 2 &lt;&lt; 16\n    ALIGN_8 = 3 &lt;&lt; 16\n    MINSIZE_2 = 1 &lt;&lt; 24\n    MINSIZE_4 = 2 &lt;&lt; 24\n    MINSIZE_8 = 3 &lt;&lt; 24\n</code></pre>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryMap","title":"<code>MemoryMap</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_memory_map</p> Source code in <code>src/retropy/core/memory.py</code> <pre><code>class MemoryMap(Structure):\n    \"\"\"retro_memory_map\"\"\"\n\n    _fields_ = [\n        (\"descriptors\", POINTER(MemoryDescriptor)),\n        (\"num_descriptors\", c_uint),\n    ]\n\n    descriptors: POINTER(MemoryDescriptor)\n    num_descriptors: int\n</code></pre>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryRegion","title":"<code>MemoryRegion</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>RETRO_MEMORY_</p> Source code in <code>src/retropy/core/memory.py</code> <pre><code>class MemoryRegion(IntEnum):\n    \"\"\"RETRO_MEMORY_\"\"\"\n\n    # MASK = 0xFF\n    SAVE_RAM = 0\n    \"\"\"Memory typically on card ridge. Used to save games aka SRAM\"\"\"\n    RTC = 1\n    \"\"\"Some card ridges have internal clocks.\"\"\"\n    SYSTEM_RAM = 2\n    \"\"\"Main system working RAM aka HRAM\"\"\"\n    VIDEO_RAM = 3\n    \"\"\"Main system video RAM aka VRAM, WRAM\"\"\"\n</code></pre>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryRegion.RTC","title":"<code>RTC = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Some card ridges have internal clocks.</p>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryRegion.SAVE_RAM","title":"<code>SAVE_RAM = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Memory typically on card ridge. Used to save games aka SRAM</p>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryRegion.SYSTEM_RAM","title":"<code>SYSTEM_RAM = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Main system working RAM aka HRAM</p>"},{"location":"reference/retropy/core/memory/#retropy.core.memory.MemoryRegion.VIDEO_RAM","title":"<code>VIDEO_RAM = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Main system video RAM aka VRAM, WRAM</p>"},{"location":"reference/retropy/core/message/","title":"message","text":""},{"location":"reference/retropy/core/network/","title":"network","text":""},{"location":"reference/retropy/core/retro/","title":"retro","text":"<p>Provide basic python wrapper for dll Cores.</p>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy","title":"<code>RetroPy</code>","text":"<p>Python(ic) frontend for libretro</p> <p>Attributes:</p> Name Type Description <code>pixel_format</code> <code>PixelFormat</code> <p>Pixel format</p> <code>memory</code> <code>RAM</code> <p>memory</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>class RetroPy:\n    \"\"\"\n    Python(ic) frontend for libretro\n\n    Attributes:\n        pixel_format (PixelFormat): Pixel format\n        memory (RAM): memory\n    \"\"\"\n\n    pixel_format: PixelFormat\n    core_variables: dict[bytes, dict[str, bytes | Sequence[bytes]]] = {}\n    # frontend_options: dict[str, Any] = {}\n    controllers: list[InputDevice] = []\n\n    last_frame: Frame = None\n    \"\"\"Last video frame returned by `video_refresh` callback.\"\"\"\n\n    loaded: bool = False\n    \"\"\"Whether a game is loaded.\"\"\"\n\n    memory: RAM\n    \"\"\"Cores memory / RAM. Only available if game is `loaded`.\"\"\"\n\n    cheats: CheatManager\n    \"\"\"Add cheats to currently loaded game.\n\n    Codes can be found on the internet e.g. `gamehacking.org` or `github.com/libretro/libretro-database`\"\"\"\n\n    # region magic methods / (de)init\n\n    def __init__(self, path: str, numpy: bool = True) -&gt; None:\n        \"\"\"Loads needed shared object and initializes the libretro core\n\n        Args:\n            path (str): Path to valid core / shared object\n        \"\"\"\n        self.path = Path(path).resolve()\n        self.numpy = numpy\n\n        # Load core dll\n        self.core = cdll.LoadLibrary(self.path)\n\n        # region Set ctypes arg-/restype\n        self.core.retro_set_environment.argtypes = [cb.environment_t]\n        self.core.retro_set_environment.restype = None\n        self.core.retro_set_video_refresh.argtypes = [cb.video_refresh_t]\n        self.core.retro_set_video_refresh.restype = None\n        self.core.retro_set_audio_sample.argtypes = [cb.audio_sample_t]\n        self.core.retro_set_audio_sample.restype = None\n        self.core.retro_set_audio_sample_batch.argtypes = [cb.audio_sample_batch_t]\n        self.core.retro_set_audio_sample_batch.restype = None\n        self.core.retro_set_input_poll.argtypes = [cb.input_poll_t]\n        self.core.retro_set_input_poll.restype = None\n        self.core.retro_set_input_state.argtypes = [cb.input_state_t]\n        self.core.retro_set_input_state.restype = None\n        #\n        self.core.retro_init.argtypes = None\n        self.core.retro_init.restype = None\n        self.core.retro_deinit.argtypes = None\n        self.core.retro_deinit.restype = None\n        self.core.retro_api_version.argtypes = None\n        self.core.retro_api_version.restype = c_uint\n        self.core.retro_get_system_info.argtypes = [POINTER(SystemInfo)]\n        self.core.retro_get_system_info.restype = None\n        self.core.retro_get_system_av_info.argtypes = [POINTER(SystemAvInfo)]\n        self.core.retro_get_system_av_info.restype = None\n        # retro_set_controller_port_device\n        self.core.retro_reset.argtypes = None\n        self.core.retro_reset.restype = None\n        self.core.retro_run.argtypes = None\n        self.core.retro_run.restype = None\n        self.core.retro_serialize_size.argtypes = None\n        self.core.retro_serialize_size.restype = c_size_t\n        self.core.retro_serialize.argtypes = [c_void_p, c_size_t]\n        self.core.retro_serialize.restype = c_bool\n        self.core.retro_unserialize.argtypes = [c_void_p, c_size_t]\n        self.core.retro_unserialize.restype = c_bool\n        self.core.retro_cheat_reset.argtypes = None\n        self.core.retro_cheat_reset.restype = None\n        self.core.retro_cheat_set.argtypes = [c_uint, c_bool, c_char_p]\n        self.core.retro_cheat_set.restype = None\n        self.core.retro_load_game.argtypes = [POINTER(GameInfo)]\n        self.core.retro_load_game.restype = c_bool\n        # retro_load_game_special\n        self.core.retro_unload_game.argtypes = None\n        self.core.retro_unload_game.restype = None\n        self.core.retro_get_region.argtypes = None\n        self.core.retro_get_region.restype = c_uint\n        self.core.retro_get_memory_data.argtypes = [c_uint]\n        self.core.retro_get_memory_data.restype = c_void_p\n        self.core.retro_get_memory_size.argtypes = [c_uint]\n        self.core.retro_get_memory_size.restype = c_size_t\n\n        # endregion\n\n        logging.info(f\"Loading core: '{str(self.path)}'\")\n\n        # Create handle for environment commands\n        self.env_cmd: dict[int | EnvironmentCommand, Callable[[c_void_p], bool]] = {\n            EnvironmentCommand.SET_ROTATION: self.env_SET_ROTATION,\n            EnvironmentCommand.GET_OVERSCAN: self.env_GET_OVERSCAN,\n            EnvironmentCommand.GET_CAN_DUPE: self.env_GET_CAN_DUPE,\n            EnvironmentCommand.SET_MESSAGE: self.env_SET_MESSAGE,\n            EnvironmentCommand.SHUTDOWN: self.env_SHUTDOWN,\n            EnvironmentCommand.SET_PERFORMANCE_LEVEL: self.env_SET_PERFORMANCE_LEVEL,\n            EnvironmentCommand.GET_SYSTEM_DIRECTORY: self.env_GET_SYSTEM_DIRECTORY,\n            EnvironmentCommand.SET_PIXEL_FORMAT: self.env_SET_PIXEL_FORMAT,\n            EnvironmentCommand.SET_INPUT_DESCRIPTORS: self.env_SET_INPUT_DESCRIPTORS,\n            EnvironmentCommand.SET_KEYBOARD_CALLBACK: self.env_SET_KEYBOARD_CALLBACK,\n            EnvironmentCommand.SET_DISK_CONTROL_INTERFACE: self.env_SET_DISK_CONTROL_INTERFACE,\n            EnvironmentCommand.SET_HW_RENDER: self.env_SET_HW_RENDER,\n            EnvironmentCommand.GET_VARIABLE: self.env_GET_VARIABLE,\n            EnvironmentCommand.SET_VARIABLES: self.env_SET_VARIABLES,\n            EnvironmentCommand.GET_VARIABLE_UPDATE: self.env_GET_VARIABLE_UPDATE,\n            EnvironmentCommand.SET_SUPPORT_NO_GAME: self.env_SET_SUPPORT_NO_GAME,\n            EnvironmentCommand.GET_LIBRETRO_PATH: self.env_GET_LIBRETRO_PATH,\n            EnvironmentCommand.SET_FRAME_TIME_CALLBACK: self.env_SET_FRAME_TIME_CALLBACK,\n            EnvironmentCommand.SET_AUDIO_CALLBACK: self.env_SET_AUDIO_CALLBACK,\n            EnvironmentCommand.GET_RUMBLE_INTERFACE: self.env_GET_RUMBLE_INTERFACE,\n            EnvironmentCommand.GET_INPUT_DEVICE_CAPABILITIES: self.env_GET_INPUT_DEVICE_CAPABILITIES,\n            EnvironmentCommand.GET_SENSOR_INTERFACE: self.env_GET_SENSOR_INTERFACE,\n            EnvironmentCommand.GET_CAMERA_INTERFACE: self.env_GET_CAMERA_INTERFACE,\n            EnvironmentCommand.GET_LOG_INTERFACE: self.env_GET_LOG_INTERFACE,\n            EnvironmentCommand.GET_PERF_INTERFACE: self.env_GET_PERF_INTERFACE,\n            EnvironmentCommand.GET_LOCATION_INTERFACE: self.env_GET_LOCATION_INTERFACE,\n            EnvironmentCommand.GET_CORE_ASSETS_DIRECTORY: self.env_GET_CORE_ASSETS_DIRECTORY,\n            EnvironmentCommand.GET_SAVE_DIRECTORY: self.env_GET_SAVE_DIRECTORY,\n            EnvironmentCommand.SET_SYSTEM_AV_INFO: self.env_SET_SYSTEM_AV_INFO,\n            EnvironmentCommand.SET_PROC_ADDRESS_CALLBACK: self.env_SET_PROC_ADDRESS_CALLBACK,\n            EnvironmentCommand.SET_SUBSYSTEM_INFO: self.env_SET_SUBSYSTEM_INFO,\n            EnvironmentCommand.SET_CONTROLLER_INFO: self.env_SET_CONTROLLER_INFO,\n            EnvironmentCommand.SET_MEMORY_MAPS: self.env_SET_MEMORY_MAPS,\n            EnvironmentCommand.SET_GEOMETRY: self.env_SET_GEOMETRY,\n            EnvironmentCommand.GET_USERNAME: self.env_GET_USERNAME,\n            EnvironmentCommand.GET_LANGUAGE: self.env_GET_LANGUAGE,\n            EnvironmentCommand.GET_CURRENT_SOFTWARE_FRAMEBUFFER: self.env_GET_CURRENT_SOFTWARE_FRAMEBUFFER,\n            EnvironmentCommand.GET_HW_RENDER_INTERFACE: self.env_GET_HW_RENDER_INTERFACE,\n            EnvironmentCommand.SET_SUPPORT_ACHIEVEMENTS: self.env_SET_SUPPORT_ACHIEVEMENTS,\n            EnvironmentCommand.SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE: self.env_SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE,\n            EnvironmentCommand.SET_SERIALIZATION_QUIRKS: self.env_SET_SERIALIZATION_QUIRKS,\n            EnvironmentCommand.SET_HW_SHARED_CONTEXT: self.env_SET_HW_SHARED_CONTEXT,\n            EnvironmentCommand.GET_VFS_INTERFACE: self.env_GET_VFS_INTERFACE,\n            EnvironmentCommand.GET_LED_INTERFACE: self.env_GET_LED_INTERFACE,\n            EnvironmentCommand.GET_AUDIO_VIDEO_ENABLE: self.env_GET_AUDIO_VIDEO_ENABLE,\n            EnvironmentCommand.GET_MIDI_INTERFACE: self.env_GET_MIDI_INTERFACE,\n            EnvironmentCommand.GET_FASTFORWARDING: self.env_GET_FASTFORWARDING,\n            EnvironmentCommand.GET_TARGET_REFRESH_RATE: self.env_GET_TARGET_REFRESH_RATE,\n            EnvironmentCommand.GET_INPUT_BITMASKS: self.env_GET_INPUT_BITMASKS,\n            EnvironmentCommand.GET_CORE_OPTIONS_VERSION: self.env_GET_CORE_OPTIONS_VERSION,\n            EnvironmentCommand.SET_CORE_OPTIONS: self.env_SET_CORE_OPTIONS,\n            EnvironmentCommand.SET_CORE_OPTIONS_INTL: self.env_SET_CORE_OPTIONS_INTL,\n            EnvironmentCommand.SET_CORE_OPTIONS_DISPLAY: self.env_SET_CORE_OPTIONS_DISPLAY,\n            EnvironmentCommand.GET_PREFERRED_HW_RENDER: self.env_GET_PREFERRED_HW_RENDER,\n            EnvironmentCommand.GET_DISK_CONTROL_INTERFACE_VERSION: self.env_GET_DISK_CONTROL_INTERFACE_VERSION,\n            EnvironmentCommand.SET_DISK_CONTROL_EXT_INTERFACE: self.env_SET_DISK_CONTROL_EXT_INTERFACE,\n            EnvironmentCommand.GET_MESSAGE_INTERFACE_VERSION: self.env_GET_MESSAGE_INTERFACE_VERSION,\n            EnvironmentCommand.SET_MESSAGE_EXT: self.env_SET_MESSAGE_EXT,\n            EnvironmentCommand.GET_INPUT_MAX_USERS: self.env_GET_INPUT_MAX_USERS,\n            EnvironmentCommand.SET_AUDIO_BUFFER_STATUS_CALLBACK: self.env_SET_AUDIO_BUFFER_STATUS_CALLBACK,\n            EnvironmentCommand.SET_MINIMUM_AUDIO_LATENCY: self.env_SET_MINIMUM_AUDIO_LATENCY,\n            EnvironmentCommand.SET_FASTFORWARDING_OVERRIDE: self.env_SET_FASTFORWARDING_OVERRIDE,\n            EnvironmentCommand.SET_CONTENT_INFO_OVERRIDE: self.env_SET_CONTENT_INFO_OVERRIDE,\n            EnvironmentCommand.GET_GAME_INFO_EXT: self.env_GET_GAME_INFO_EXT,\n            EnvironmentCommand.SET_CORE_OPTIONS_V2: self.env_SET_CORE_OPTIONS_V2,\n            EnvironmentCommand.SET_CORE_OPTIONS_V2_INTL: self.env_SET_CORE_OPTIONS_V2_INTL,\n            EnvironmentCommand.SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK: self.env_SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK,\n            EnvironmentCommand.SET_VARIABLE: self.env_SET_VARIABLE,\n            EnvironmentCommand.GET_THROTTLE_STATE: self.env_GET_THROTTLE_STATE,\n            EnvironmentCommand.GET_SAVESTATE_CONTEXT: self.env_GET_SAVESTATE_CONTEXT,\n            EnvironmentCommand.GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT: self.env_GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT,\n            EnvironmentCommand.GET_JIT_CAPABLE: self.env_GET_JIT_CAPABLE,\n            EnvironmentCommand.GET_MICROPHONE_INTERFACE: self.env_GET_MICROPHONE_INTERFACE,\n            EnvironmentCommand.GET_DEVICE_POWER: self.env_GET_DEVICE_POWER,\n            EnvironmentCommand.SET_NETPACKET_INTERFACE: self.env_SET_NETPACKET_INTERFACE,\n        }\n\n        # Create callback objects (and keep them in scope)\n        self.__cb_env = cb.environment_t(self.environment)\n        self.__cb_video = cb.video_refresh_t(self.video_refresh)\n        self.__cb_audio = cb.audio_sample_t(self.audio_sample)\n        self.__cb_audio_batch = cb.audio_sample_batch_t(self.audio_sample_batch)\n        self.__cb_input_poll = cb.input_poll_t(self.input_poll)\n        self.__cb_input_state = cb.input_state_t(self.input_state)\n\n        # Register callbacks\n        self.core.retro_set_environment(self.__cb_env)\n        self.core.retro_set_video_refresh(self.__cb_video)\n        self.core.retro_set_audio_sample(self.__cb_audio)\n        self.core.retro_set_audio_sample_batch(self.__cb_audio_batch)\n        self.core.retro_set_input_poll(self.__cb_input_poll)\n        self.core.retro_set_input_state(self.__cb_input_state)\n\n        # Initialize core\n        self.core.retro_init()\n\n        # Initialize (empty) memory pointer (get loaded on game load)\n        self.memory = RAM()\n\n        # Initialize cheats manager\n        self.cheats = CheatManager(\n            self.core.retro_cheat_set, self.core.retro_cheat_reset\n        )\n\n    def __del__(self):\n        self.unload()\n        self.core.retro_deinit()\n\n    # endregion\n\n    # region Core properties\n\n    def version(self) -&gt; int:\n        \"\"\"Retrieve API version\n\n        Returns:\n            int: version\n        \"\"\"\n        return self.core.retro_api_version()\n\n    def region(self) -&gt; Region:\n        \"\"\"Retrieve cores regional code\n\n        Returns:\n            Region: region\n        \"\"\"\n        return Region(self.core.retro_get_region())\n\n    def system_info(self) -&gt; SystemInfo:\n        \"\"\"Retrieve cores system information\n\n        Returns:\n            SystemInfo: core information\n        \"\"\"\n        info = SystemInfo()\n        self.core.retro_get_system_info(byref(info))\n        return info\n\n    def system_av_info(self) -&gt; SystemAvInfo:\n        \"\"\"Retrieve cores system information specific for a game\n\n        Returns:\n            SystemAvInfo: core information\n        \"\"\"\n        info = SystemAvInfo()\n        self.core.retro_get_system_av_info(byref(info))\n        return info\n\n    # endregion\n\n    # region Functions\n\n    # region Not implement. Most likely useless\n\n    # def set_player_controller(self, player: int, device: Device):\n    #     \"\"\"Sets the input device of a player. All player devices default to Device.JOYPAD.\n\n    #     Args:\n    #         player (int): player id\n    #         device (Device): set as input device\n    #     \"\"\"\n    #     self.core.retro_set_controller_port_device(player, device)\n    #     logging.debug(\"Set player controller type\")\n\n    # endregion\n\n    def load(self, path: str):\n        \"\"\"Load a game from ROM\n\n        Args:\n            path (str): Parh to ROM\n\n        Raises:\n            FileNotFoundError: rom file does not exist\n            InvalidRomError: rom file cannot be processed\n        \"\"\"\n\n        if self.loaded:\n            logging.debug(\"Game already loaded\")\n            return\n\n        romPath = Path(path).resolve()\n        if not romPath.is_file():\n            raise FileNotFoundError(f\"`path` ({romPath}) is not a file\")\n\n        game = GameInfo(\n            path=str(romPath).encode(\"utf-8\"), data=None, size=0, meta=b\"metadata\"\n        )\n\n        self.loaded = bool(self.core.retro_load_game(byref(game)))\n\n        if not self.loaded:\n            raise InvalidRomError(\n                f\"file '{game.path.decode('utf-8')}' cannot be loaded\"\n            )\n\n        # Get Memory Pointer\n\n        def set_ptr(region, name):\n            size: int = self.core.retro_get_memory_size(region)\n            ptr: c_void_p = self.core.retro_get_memory_data(region)\n\n            if size &gt; 0 and ptr is not None:\n                ptr = cast(ptr, POINTER(c_ubyte))\n                setattr(self.memory, name, InternalMemory(ptr, size))\n\n        set_ptr(MemoryRegion.SAVE_RAM, \"save\")\n        set_ptr(MemoryRegion.RTC, \"rtc\")\n        set_ptr(MemoryRegion.SYSTEM_RAM, \"system\")\n        set_ptr(MemoryRegion.VIDEO_RAM, \"video\")\n\n        logging.info(\"Game loaded\")\n\n    def unload(self):\n        \"\"\"Unload current game\n\n        Must be called before loading another game\n        \"\"\"\n        self.core.retro_unload_game()\n        self.loaded = False\n\n        self.memory._clear()\n        self.cheats._clear()\n\n        logging.info(\"Game unloaded\")\n\n    def frame_advance(self):\n        \"\"\"\n        Run core for a single video frame\n        \"\"\"\n        self.core.retro_run()\n        return self.last_frame\n\n    def reset(self):\n        \"\"\"\n        Reset current game to intial state\n        \"\"\"\n        self.core.retro_reset()\n        logging.info(\"Game reset\")\n\n    def save_state(self) -&gt; Savestate:\n        \"\"\"Save current core state\n\n        Raises:\n            SavestateError: Creating savestate failed\n\n        Returns:\n            Savestate: Savestate data\n        \"\"\"\n\n        size = self.core.retro_serialize_size()\n        save = Savestate(size)\n\n        if not bool(self.core.retro_serialize(save.data, save.size)):\n            raise SavestateError(\"Creating savestate failed\")\n\n        logging.info(f\"State saved\")\n\n        return save\n\n    def load_state(self, savestate: Savestate):\n        \"\"\"Load previously saved core state\n\n        Args:\n            savestate (Savestate): state to load\n\n        Raises:\n            SavestateError: Loading savestate failed\n        \"\"\"\n\n        if not bool(self.core.retro_unserialize(savestate.data, savestate.size)):\n            raise SavestateError(\"Loading savestate failed\")\n\n        logging.info(f\"State loaded\")\n\n    # Cheats - index: identifier, enabled: toggle, code: cheat code\n    # https://github.com/libretro/RetroArch/blob/master/cheat_manager.c#L78\n\n    # endregion\n\n    # region Callbacks\n\n    def environment(self, cmd: int, data) -&gt; bool:\n        \"\"\"Handle diverse tasks\n\n        Args:\n            cmd (int): Command identifier (`RETRO_ENVIRONMENT`)\n            data (c_void_p): Must be cast to correct type\n\n        `data` has no type so it automatically recieves type when cast\n\n        Returns:\n            bool: Meaning depending on command. Return `False` to **commonly** mean a command is not supported / indicate success of action.\n        \"\"\"\n\n        func = self.env_cmd.get(cmd, None)\n\n        if func:\n            return func(data)\n\n        logging.warning(\n            f\"Unknown Command - cmd={cmd} (0x{cmd:X}): Consider reading the documentation / source code of the current core to support custom environment commands\"\n        )\n\n        return False\n\n    def video_refresh(self, data, width: int, height: int, pitch: int) -&gt; None:\n        \"\"\"A new video frame is available\n\n        Args:\n            data (c_void_p): framebuffer (must be cast into correct format)\n            width (int): width of frame\n            height (int): height of frame\n            pitch (int): pitch of frame line\n        \"\"\"\n        logging.debug(\"Callback: video_refresh\")\n\n        # Data may be NULL if GET_CAN_DUPE returns true (libretro.h: 4381)\n        if not data:\n            return\n\n        self.last_frame = buffer_to_frame(\n            data, (height, width, pitch), self.pixel_format, numpy=self.numpy\n        )\n\n    def audio_sample(self, left: int, right: int) -&gt; None:\n        \"\"\"New audio frame is available\n\n        Args:\n            left (int): left audio channel\n            right (int): rigth audio channel\n        \"\"\"\n        logging.debug(\"Callback: audio_sample\")\n\n    def audio_sample_batch(self, data: POINTER(c_int16), frames: int) -&gt; int:\n        \"\"\"New audio frames are available\n\n        Args:\n            data (POINTER(c_uint16)): alternating left-right audio channels\n            frames (int): number of audio frames\n\n        Returns:\n            int: ?\n        \"\"\"\n        logging.debug(\"Callback: audio_sample_batch\")\n\n        return 0\n\n    def input_poll(self) -&gt; None:\n        \"\"\"Read frontend input\"\"\"\n        logging.debug(\"Callback: input_poll\")\n\n    def input_state(self, port: int, device: int, index: int, id: int) -&gt; int:\n        \"\"\"Pass values of `input_poll` to core\n\n        Args:\n            port (int): Player\n            device (int): Device identifier (`Device`)\n            index (int): Only used for analog device\n            id (int): Action ID\n\n        Returns:\n            int: Value of input action\n        \"\"\"\n\n        value = self.controllers[port].get_state(device, index, id)\n\n        logging.debug(\"Callback: input_state\")\n        return value\n\n    # endregion\n\n    # region environment commands\n\n    def env_SET_ROTATION(self, data) -&gt; bool:\n        logging.debug(\"GET_OVERSCAN (not implemented)\")\n        return False\n\n    def env_GET_OVERSCAN(self, data) -&gt; bool:\n        logging.debug(\"GET_CAN_DUPE (not implemented)\")\n        return False\n\n    def env_GET_CAN_DUPE(self, data) -&gt; bool:\n        logging.debug(\"SET_MESSAGE (not implemented)\")\n        return False\n\n    def env_SET_MESSAGE(self, data) -&gt; bool:\n        logging.debug(\"SHUTDOWN (not implemented)\")\n        return False\n\n    def env_SHUTDOWN(self, data) -&gt; bool:\n        logging.debug(\"SHUTDOWN (not implemented)\")\n        return False\n\n    def env_SET_PERFORMANCE_LEVEL(self, data) -&gt; bool:\n        logging.debug(\"SET_PERFORMANCE_LEVEL (not implemented)\")\n        return False\n\n    def env_GET_SYSTEM_DIRECTORY(self, data) -&gt; bool:\n        data = cast(data, POINTER(c_char_p)).contents\n\n        system_directory = Path(\"~/.libretro\").expanduser().resolve()\n\n        system_directory.mkdir(parents=True, exist_ok=True)\n\n        data = c_char_p(str(system_directory).encode(\"utf-8\"))\n\n        logging.info(f\"GET_SYSTEM_DIRECTORY: {system_directory}\")\n        return False\n\n    def env_SET_PIXEL_FORMAT(self, data) -&gt; bool:\n        data = cast(data, POINTER(c_int32)).contents.value\n\n        format = PixelFormat(data)\n        self.pixel_format = format\n\n        logging.info(f\"SET_PIXEL_FORMAT: {format}\")\n        return False\n\n    def env_SET_INPUT_DESCRIPTORS(self, data) -&gt; bool:\n        data = cast(data, POINTER(InputDescriptor))\n\n        # Add a controller for each player\n\n        # input: InputDescriptor\n        for input in foreach(data, lambda v: v.description):\n            # print(\n            #     input.port,\n            #     Device(input.device),\n            #     input.index,\n            #     input.id,\n            #     input.description,\n            # )\n            if input.port &gt;= len(self.controllers):\n                self.controllers.append(GamePad())\n\n        logging.debug(\"SET_INPUT_DESCRIPTORS\")\n        return False\n\n    def env_SET_KEYBOARD_CALLBACK(self, data) -&gt; bool:\n        logging.debug(\"SET_KEYBOARD_CALLBACK (not implemented)\")\n        return False\n\n    def env_SET_DISK_CONTROL_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"SET_DISK_CONTROL_INTERFACE (not implemented)\")\n        return False\n\n    def env_SET_HW_RENDER(self, data) -&gt; bool:\n        # No hardware acceleration (for now?)\n\n        # data = cast(data, POINTER(HWRenderCallback)).contents\n        # print(HwContextType(data.context_type))\n\n        logging.debug(\"SET_HW_RENDER (not implemented)\")\n        return False\n\n    def env_GET_VARIABLE(self, data) -&gt; bool:\n        data = cast(data, POINTER(CoreVariable)).contents\n\n        # var = self.core_variables.get(data.key, None)\n        # if var:\n        #     data.value = var[\"value\"]\n\n        if var := self.core_variables.get(data.key, None):\n            data.value = var[\"value\"]\n\n        logging.debug(f\"GET_VARIABLE: key={data.key}\")\n        return False\n\n    def env_SET_VARIABLES(self, data) -&gt; bool:\n        data = cast(data, POINTER(CoreVariable))\n\n        # variables = {}\n\n        for var in foreach(data, lambda v: v.key and v.value):\n            # variables[var.key] = RetroOption(var.value)\n            desc, rest = var.value.split(b\"; \")\n            valid = tuple(rest.split(b\"|\"))\n            data = valid[0]\n\n            self.core_variables[var.key] = {\n                \"value\": data,\n                \"valid\": valid,\n                \"desc\": desc,\n            }\n\n        # print(self.core_variables)\n\n        logging.debug(f\"SET_VARIABLES\")\n\n        return True\n\n    def env_GET_VARIABLE_UPDATE(self, data) -&gt; bool:\n        data = cast(data, POINTER(c_bool)).contents.value\n\n        logging.debug(f\"GET_VARIABLE_UPDATE: {data}\")\n        return False\n\n    def env_SET_SUPPORT_NO_GAME(self, data) -&gt; bool:\n        logging.debug(\"SET_SUPPORT_NO_GAME (not implemented)\")\n        return False\n\n    def env_GET_LIBRETRO_PATH(self, data) -&gt; bool:\n        logging.debug(\"GET_LIBRETRO_PATH (not implemented)\")\n        return False\n\n    def env_SET_FRAME_TIME_CALLBACK(self, data) -&gt; bool:\n        logging.debug(\"SET_FRAME_TIME_CALLBACK (not implemented)\")\n        return False\n\n    def env_SET_AUDIO_CALLBACK(self, data) -&gt; bool:\n        logging.debug(\"SET_AUDIO_CALLBACK (not implemented)\")\n        return False\n\n    def env_GET_RUMBLE_INTERFACE(self, data) -&gt; bool:\n        # data = cast(data, POINTER(RumbleInterface)).contents\n        # self.__rumble = set_rumble_state_t(lambda *args: print(\"rumble:\", *args))\n        # data.set_rumble_state = self.__rumble\n\n        logging.debug(\"GET_RUMBLE_INTERFACE\")\n        return False\n\n    def env_GET_INPUT_DEVICE_CAPABILITIES(self, data) -&gt; bool:\n        logging.debug(\"GET_INPUT_DEVICE_CAPABILITIES (not implemented)\")\n        return False\n\n    def env_GET_SENSOR_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_SENSOR_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_CAMERA_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_CAMERA_INTERFACE (not implemented)\")\n        return False\n\n        data = cast(data, POINTER(CameraCallback)).contents\n\n        self.__cam = lambda *args: print(\"cam:\", args)\n\n        data.caps = 0  # raw buffer\n        data.width = 100\n        data.height = 100\n        data.start = retro_camera_start_t(self.__cam)\n        data.stop = retro_camera_stop_t(self.__cam)\n        data.frame_raw_framebuffer = retro_camera_frame_raw_framebuffer_t(self.__cam)\n        data.frame_opengl_texture = None\n        data.initialized = retro_camera_lifetime_status_t(self.__cam)\n        data.deinitialized = retro_camera_lifetime_status_t(self.__cam)\n\n        logging.debug(\"GET_CAMERA_INTERFACE\")\n\n        return True\n\n    def env_GET_LOG_INTERFACE(self, data) -&gt; bool:\n        # ctypes does not support variadic functions\n\n        data = cast(data, POINTER(LogCallback)).contents\n        self.__log = log_printf_t(lambda *args: print(\"LOG:\", *args))\n        data.log = self.__log\n\n        logging.debug(\"GET_LOG_INTERFACE\")\n\n        return True\n\n    def env_GET_PERF_INTERFACE(self, data) -&gt; bool:\n        data = cast(data, POINTER(perf.PerfCallback)).contents\n\n        self.__perf1 = perf.perf_get_time_usec_t(\n            lambda *args: print(\"get_time_usec:\", *args)\n        )\n        self.__perf2 = perf.get_cpu_features_t(\n            lambda *args: print(\"cpu_features:\", *args)\n        )\n        self.__perf3 = perf.perf_get_counter_t(\n            lambda *args: print(\"get_counter:\", *args)\n        )\n\n        # self.__perf_counter = perf.PerfCounter()\n\n        self.__perf4 = perf.perf_register_t(lambda *args: print(\"register:\", *args))\n        self.__perf5 = perf.perf_start_t(lambda *args: print(\"start:\", *args))\n        self.__perf6 = perf.perf_stop_t(lambda *args: print(\"stop:\", *args))\n        self.__perf7 = perf.perf_log_t(lambda: print(\"performance log\"))\n\n        data.get_time_usec = self.__perf1\n        data.get_cpu_features = self.__perf2\n        data.get_perf_counter = self.__perf3\n        data.perf_register = self.__perf4\n        data.perf_start = self.__perf5\n        data.perf_stop = self.__perf6\n        data.perf_log = self.__perf7\n\n        self.perf_interface = data\n\n        logging.debug(\"GET_PERF_INTERFACE\")\n        return True\n\n    def env_GET_LOCATION_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_LOCATION_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_CORE_ASSETS_DIRECTORY(self, data) -&gt; bool:\n        logging.debug(\"GET_CORE_ASSETS_DIRECTORY (not implemented)\")\n        return False\n\n    def env_GET_SAVE_DIRECTORY(self, data) -&gt; bool:\n        logging.debug(\"GET_SAVE_DIRECTORY (not implemented)\")\n        return False\n\n    def env_SET_SYSTEM_AV_INFO(self, data) -&gt; bool:\n        logging.debug(\"SET_SYSTEM_AV_INFO (not implemented)\")\n        return False\n\n    def env_SET_PROC_ADDRESS_CALLBACK(self, data) -&gt; bool:\n        logging.debug(\"SET_PROC_ADDRESS_CALLBACK (not implemented)\")\n        return False\n\n    def env_SET_SUBSYSTEM_INFO(self, data) -&gt; bool:\n        logging.debug(\"SET_SUBSYSTEM_INFO (not implemented)\")\n        return False\n\n    def env_SET_CONTROLLER_INFO(self, data) -&gt; bool:\n        data = cast(data, POINTER(ControllerInfo)).contents\n\n        accepted_controller = []\n\n        for i in range(data.num_types):\n            info = data.types[i]\n            accepted_controller.append((info.id, info.desc))\n\n        # print(accepted_controller)\n\n        logging.debug(\"SET_CONTROLLER_INFO\")\n\n        return True\n\n    def env_SET_MEMORY_MAPS(self, data) -&gt; bool:\n        data = cast(data, POINTER(MemoryMap)).contents\n\n        for i in range(data.num_descriptors):\n            desc = data.descriptors[i]\n            # print(f\"{desc.start:016X}, {desc.addrspace}\")\n            # print(desc)\n            pass\n\n        logging.debug(\"SET_MEMORY_MAPS\")\n        return True\n\n    def env_SET_GEOMETRY(self, data) -&gt; bool:\n        logging.debug(\"SET_GEOMETRY (not implemented)\")\n        return False\n\n    def env_GET_USERNAME(self, data) -&gt; bool:\n        logging.debug(\"GET_USERNAME (not implemented)\")\n        return False\n\n    def env_GET_LANGUAGE(self, data) -&gt; bool:\n        logging.debug(\"GET_LANGUAGE (not implemented)\")\n        return False\n\n    def env_GET_CURRENT_SOFTWARE_FRAMEBUFFER(self, data) -&gt; bool:\n        logging.debug(\"GET_CURRENT_SOFTWARE_FRAMEBUFFER (not implemented)\")\n        return False\n\n    def env_GET_HW_RENDER_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_HW_RENDER_INTERFACE (not implemented)\")\n        return False\n\n    def env_SET_SUPPORT_ACHIEVEMENTS(self, data) -&gt; bool:\n        data = cast(data, POINTER(c_bool)).contents.value\n        logging.info(f\"SET_SUPPORT_ACHIEVEMENTS: {data}\")\n        return True\n\n    def env_SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE (not implemented)\")\n        return False\n\n    def env_SET_SERIALIZATION_QUIRKS(self, data) -&gt; bool:\n        logging.debug(\"SET_SERIALIZATION_QUIRKS (not implemented)\")\n        return False\n\n    def env_SET_HW_SHARED_CONTEXT(self, data) -&gt; bool:\n        logging.debug(\"SET_HW_SHARED_CONTEXT (not implemented)\")\n        return False\n\n    def env_GET_VFS_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_VFS_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_LED_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_LED_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_AUDIO_VIDEO_ENABLE(self, data) -&gt; bool:\n        logging.debug(\"GET_AUDIO_VIDEO_ENABLE (not implemented)\")\n        return False\n\n    def env_GET_MIDI_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_MIDI_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_FASTFORWARDING(self, data) -&gt; bool:\n        logging.debug(\"GET_FASTFORWARDING (not implemented)\")\n        return False\n\n    def env_GET_TARGET_REFRESH_RATE(self, data) -&gt; bool:\n        logging.debug(\"GET_TARGET_REFRESH_RATE (not implemented)\")\n        return False\n\n    def env_GET_INPUT_BITMASKS(self, data) -&gt; bool:\n        if data:\n            data = cast(data, POINTER(c_bool)).contents.value\n            ...\n            # return True\n\n        logging.debug(f\"GET_INPUT_BITMASKS: {data}\")\n        return False\n\n    def env_GET_CORE_OPTIONS_VERSION(self, data) -&gt; bool:\n        data = cast(data, POINTER(c_uint)).contents.value\n\n        logging.info(f\"GET_CORE_OPTIONS_VERSION: {data}\")\n        return False\n\n    def env_SET_CORE_OPTIONS(self, data) -&gt; bool:\n        logging.debug(\"SET_CORE_OPTIONS (not implemented)\")\n        return False\n\n    def env_SET_CORE_OPTIONS_INTL(self, data) -&gt; bool:\n        logging.debug(\"SET_CORE_OPTIONS_INTL (not implemented)\")\n        return False\n\n    def env_SET_CORE_OPTIONS_DISPLAY(self, data) -&gt; bool:\n        data = cast(data, POINTER(OptionsDisplay)).contents\n\n        logging.debug(\n            f\"SET_CORE_OPTIONS_DISPLAY {f'({data.key})' if data.visible else \" \"}\"\n        )\n        return False\n\n    def env_GET_PREFERRED_HW_RENDER(self, data) -&gt; bool:\n        logging.debug(\"GET_PREFERRED_HW_RENDER (not implemented)\")\n        return False\n\n    def env_GET_DISK_CONTROL_INTERFACE_VERSION(self, data) -&gt; bool:\n        logging.debug(\"GET_DISK_CONTROL_INTERFACE_VERSION (not implemented)\")\n        return False\n\n    def env_SET_DISK_CONTROL_EXT_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"SET_DISK_CONTROL_EXT_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_MESSAGE_INTERFACE_VERSION(self, data) -&gt; bool:\n        logging.debug(\"GET_MESSAGE_INTERFACE_VERSION (not implemented)\")\n        return False\n\n    def env_SET_MESSAGE_EXT(self, data) -&gt; bool:\n        logging.debug(\"SET_MESSAGE_EXT (not implemented)\")\n        return False\n\n    def env_GET_INPUT_MAX_USERS(self, data) -&gt; bool:\n        logging.debug(\"GET_INPUT_MAX_USERS (not implemented)\")\n        return False\n\n    def env_SET_AUDIO_BUFFER_STATUS_CALLBACK(self, data) -&gt; bool:\n        logging.debug(\"SET_AUDIO_BUFFER_STATUS_CALLBACK\")\n        return False\n\n        if data:\n            data = cast(data, POINTER(AudioBufferStatusCallback)).contents\n\n            self.__audio_status = lambda *args: print(\"audio status:\", args)\n\n            data.callback = retro_audio_buffer_status_callback_t(self.__audio_status)\n\n        logging.debug(\"SET_AUDIO_BUFFER_STATUS_CALLBACK\")\n\n        return True\n\n    def env_SET_MINIMUM_AUDIO_LATENCY(self, data) -&gt; bool:\n        data = cast(data, POINTER(c_uint)).contents.value\n\n        # self.frontend_options[\"min_audio_latency\"] = data\n\n        logging.debug(f\"SET_MINIMUM_AUDIO_LATENCY: {data}\")\n        return True\n\n    def env_SET_FASTFORWARDING_OVERRIDE(self, data) -&gt; bool:\n        logging.debug(\"SET_FASTFORWARDING_OVERRIDE (not implemented)\")\n        return False\n\n    def env_SET_CONTENT_INFO_OVERRIDE(self, data) -&gt; bool:\n        logging.debug(\"SET_CONTENT_INFO_OVERRIDE (not implemented)\")\n        return False\n\n    def env_GET_GAME_INFO_EXT(self, data) -&gt; bool:\n        logging.debug(\"GET_GAME_INFO_EXT (not implemented)\")\n        return False\n\n    def env_SET_CORE_OPTIONS_V2(self, data) -&gt; bool:\n        logging.debug(\"SET_CORE_OPTIONS_V2 (not implemented)\")\n        return False\n\n    def env_SET_CORE_OPTIONS_V2_INTL(self, data) -&gt; bool:\n        logging.debug(\"SET_CORE_OPTIONS_V2_INTL (not implemented)\")\n        return False\n\n    def env_SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK(self, data) -&gt; bool:\n        data = cast(data, POINTER(UpdateOptionsDisplayCallback)).contents\n\n        self.__options_update_display = core_options_update_display_callback_t(\n            lambda: True\n        )\n\n        data.callback = self.__options_update_display\n\n        logging.debug(\"SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK\")\n        return True\n\n    def env_SET_VARIABLE(self, data) -&gt; bool:\n        logging.debug(\"SET_VARIABLE (not implemented)\")\n        return False\n\n    def env_GET_THROTTLE_STATE(self, data) -&gt; bool:\n        logging.debug(\"GET_THROTTLE_STATE (not implemented)\")\n        return False\n\n    def env_GET_SAVESTATE_CONTEXT(self, data) -&gt; bool:\n        logging.debug(\"GET_SAVESTATE_CONTEXT (not implemented)\")\n        return False\n\n    def env_GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT(self, data) -&gt; bool:\n        logging.debug(\n            \"GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT (not implemented)\"\n        )\n        return False\n\n    def env_GET_JIT_CAPABLE(self, data) -&gt; bool:\n        logging.debug(\"GET_JIT_CAPABLE (not implemented)\")\n        return False\n\n    def env_GET_MICROPHONE_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"GET_MICROPHONE_INTERFACE (not implemented)\")\n        return False\n\n    def env_GET_DEVICE_POWER(self, data) -&gt; bool:\n        logging.debug(\"GET_DEVICE_POWER (not implemented)\")\n        return False\n\n    def env_SET_NETPACKET_INTERFACE(self, data) -&gt; bool:\n        logging.debug(\"SET_NETPACKET_INTERFACE (not implemented)\")\n        return False\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.cheats","title":"<code>cheats: CheatManager = CheatManager(self.core.retro_cheat_set, self.core.retro_cheat_reset)</code>  <code>instance-attribute</code>","text":"<p>Add cheats to currently loaded game.</p> <p>Codes can be found on the internet e.g. <code>gamehacking.org</code> or <code>github.com/libretro/libretro-database</code></p>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.last_frame","title":"<code>last_frame: Frame = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Last video frame returned by <code>video_refresh</code> callback.</p>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.loaded","title":"<code>loaded: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether a game is loaded.</p>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.memory","title":"<code>memory: RAM = RAM()</code>  <code>instance-attribute</code>","text":"<p>Cores memory / RAM. Only available if game is <code>loaded</code>.</p>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.__init__","title":"<code>__init__(path, numpy=True)</code>","text":"<p>Loads needed shared object and initializes the libretro core</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to valid core / shared object</p> required Source code in <code>src/retropy/core/retro.py</code> <pre><code>def __init__(self, path: str, numpy: bool = True) -&gt; None:\n    \"\"\"Loads needed shared object and initializes the libretro core\n\n    Args:\n        path (str): Path to valid core / shared object\n    \"\"\"\n    self.path = Path(path).resolve()\n    self.numpy = numpy\n\n    # Load core dll\n    self.core = cdll.LoadLibrary(self.path)\n\n    # region Set ctypes arg-/restype\n    self.core.retro_set_environment.argtypes = [cb.environment_t]\n    self.core.retro_set_environment.restype = None\n    self.core.retro_set_video_refresh.argtypes = [cb.video_refresh_t]\n    self.core.retro_set_video_refresh.restype = None\n    self.core.retro_set_audio_sample.argtypes = [cb.audio_sample_t]\n    self.core.retro_set_audio_sample.restype = None\n    self.core.retro_set_audio_sample_batch.argtypes = [cb.audio_sample_batch_t]\n    self.core.retro_set_audio_sample_batch.restype = None\n    self.core.retro_set_input_poll.argtypes = [cb.input_poll_t]\n    self.core.retro_set_input_poll.restype = None\n    self.core.retro_set_input_state.argtypes = [cb.input_state_t]\n    self.core.retro_set_input_state.restype = None\n    #\n    self.core.retro_init.argtypes = None\n    self.core.retro_init.restype = None\n    self.core.retro_deinit.argtypes = None\n    self.core.retro_deinit.restype = None\n    self.core.retro_api_version.argtypes = None\n    self.core.retro_api_version.restype = c_uint\n    self.core.retro_get_system_info.argtypes = [POINTER(SystemInfo)]\n    self.core.retro_get_system_info.restype = None\n    self.core.retro_get_system_av_info.argtypes = [POINTER(SystemAvInfo)]\n    self.core.retro_get_system_av_info.restype = None\n    # retro_set_controller_port_device\n    self.core.retro_reset.argtypes = None\n    self.core.retro_reset.restype = None\n    self.core.retro_run.argtypes = None\n    self.core.retro_run.restype = None\n    self.core.retro_serialize_size.argtypes = None\n    self.core.retro_serialize_size.restype = c_size_t\n    self.core.retro_serialize.argtypes = [c_void_p, c_size_t]\n    self.core.retro_serialize.restype = c_bool\n    self.core.retro_unserialize.argtypes = [c_void_p, c_size_t]\n    self.core.retro_unserialize.restype = c_bool\n    self.core.retro_cheat_reset.argtypes = None\n    self.core.retro_cheat_reset.restype = None\n    self.core.retro_cheat_set.argtypes = [c_uint, c_bool, c_char_p]\n    self.core.retro_cheat_set.restype = None\n    self.core.retro_load_game.argtypes = [POINTER(GameInfo)]\n    self.core.retro_load_game.restype = c_bool\n    # retro_load_game_special\n    self.core.retro_unload_game.argtypes = None\n    self.core.retro_unload_game.restype = None\n    self.core.retro_get_region.argtypes = None\n    self.core.retro_get_region.restype = c_uint\n    self.core.retro_get_memory_data.argtypes = [c_uint]\n    self.core.retro_get_memory_data.restype = c_void_p\n    self.core.retro_get_memory_size.argtypes = [c_uint]\n    self.core.retro_get_memory_size.restype = c_size_t\n\n    # endregion\n\n    logging.info(f\"Loading core: '{str(self.path)}'\")\n\n    # Create handle for environment commands\n    self.env_cmd: dict[int | EnvironmentCommand, Callable[[c_void_p], bool]] = {\n        EnvironmentCommand.SET_ROTATION: self.env_SET_ROTATION,\n        EnvironmentCommand.GET_OVERSCAN: self.env_GET_OVERSCAN,\n        EnvironmentCommand.GET_CAN_DUPE: self.env_GET_CAN_DUPE,\n        EnvironmentCommand.SET_MESSAGE: self.env_SET_MESSAGE,\n        EnvironmentCommand.SHUTDOWN: self.env_SHUTDOWN,\n        EnvironmentCommand.SET_PERFORMANCE_LEVEL: self.env_SET_PERFORMANCE_LEVEL,\n        EnvironmentCommand.GET_SYSTEM_DIRECTORY: self.env_GET_SYSTEM_DIRECTORY,\n        EnvironmentCommand.SET_PIXEL_FORMAT: self.env_SET_PIXEL_FORMAT,\n        EnvironmentCommand.SET_INPUT_DESCRIPTORS: self.env_SET_INPUT_DESCRIPTORS,\n        EnvironmentCommand.SET_KEYBOARD_CALLBACK: self.env_SET_KEYBOARD_CALLBACK,\n        EnvironmentCommand.SET_DISK_CONTROL_INTERFACE: self.env_SET_DISK_CONTROL_INTERFACE,\n        EnvironmentCommand.SET_HW_RENDER: self.env_SET_HW_RENDER,\n        EnvironmentCommand.GET_VARIABLE: self.env_GET_VARIABLE,\n        EnvironmentCommand.SET_VARIABLES: self.env_SET_VARIABLES,\n        EnvironmentCommand.GET_VARIABLE_UPDATE: self.env_GET_VARIABLE_UPDATE,\n        EnvironmentCommand.SET_SUPPORT_NO_GAME: self.env_SET_SUPPORT_NO_GAME,\n        EnvironmentCommand.GET_LIBRETRO_PATH: self.env_GET_LIBRETRO_PATH,\n        EnvironmentCommand.SET_FRAME_TIME_CALLBACK: self.env_SET_FRAME_TIME_CALLBACK,\n        EnvironmentCommand.SET_AUDIO_CALLBACK: self.env_SET_AUDIO_CALLBACK,\n        EnvironmentCommand.GET_RUMBLE_INTERFACE: self.env_GET_RUMBLE_INTERFACE,\n        EnvironmentCommand.GET_INPUT_DEVICE_CAPABILITIES: self.env_GET_INPUT_DEVICE_CAPABILITIES,\n        EnvironmentCommand.GET_SENSOR_INTERFACE: self.env_GET_SENSOR_INTERFACE,\n        EnvironmentCommand.GET_CAMERA_INTERFACE: self.env_GET_CAMERA_INTERFACE,\n        EnvironmentCommand.GET_LOG_INTERFACE: self.env_GET_LOG_INTERFACE,\n        EnvironmentCommand.GET_PERF_INTERFACE: self.env_GET_PERF_INTERFACE,\n        EnvironmentCommand.GET_LOCATION_INTERFACE: self.env_GET_LOCATION_INTERFACE,\n        EnvironmentCommand.GET_CORE_ASSETS_DIRECTORY: self.env_GET_CORE_ASSETS_DIRECTORY,\n        EnvironmentCommand.GET_SAVE_DIRECTORY: self.env_GET_SAVE_DIRECTORY,\n        EnvironmentCommand.SET_SYSTEM_AV_INFO: self.env_SET_SYSTEM_AV_INFO,\n        EnvironmentCommand.SET_PROC_ADDRESS_CALLBACK: self.env_SET_PROC_ADDRESS_CALLBACK,\n        EnvironmentCommand.SET_SUBSYSTEM_INFO: self.env_SET_SUBSYSTEM_INFO,\n        EnvironmentCommand.SET_CONTROLLER_INFO: self.env_SET_CONTROLLER_INFO,\n        EnvironmentCommand.SET_MEMORY_MAPS: self.env_SET_MEMORY_MAPS,\n        EnvironmentCommand.SET_GEOMETRY: self.env_SET_GEOMETRY,\n        EnvironmentCommand.GET_USERNAME: self.env_GET_USERNAME,\n        EnvironmentCommand.GET_LANGUAGE: self.env_GET_LANGUAGE,\n        EnvironmentCommand.GET_CURRENT_SOFTWARE_FRAMEBUFFER: self.env_GET_CURRENT_SOFTWARE_FRAMEBUFFER,\n        EnvironmentCommand.GET_HW_RENDER_INTERFACE: self.env_GET_HW_RENDER_INTERFACE,\n        EnvironmentCommand.SET_SUPPORT_ACHIEVEMENTS: self.env_SET_SUPPORT_ACHIEVEMENTS,\n        EnvironmentCommand.SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE: self.env_SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE,\n        EnvironmentCommand.SET_SERIALIZATION_QUIRKS: self.env_SET_SERIALIZATION_QUIRKS,\n        EnvironmentCommand.SET_HW_SHARED_CONTEXT: self.env_SET_HW_SHARED_CONTEXT,\n        EnvironmentCommand.GET_VFS_INTERFACE: self.env_GET_VFS_INTERFACE,\n        EnvironmentCommand.GET_LED_INTERFACE: self.env_GET_LED_INTERFACE,\n        EnvironmentCommand.GET_AUDIO_VIDEO_ENABLE: self.env_GET_AUDIO_VIDEO_ENABLE,\n        EnvironmentCommand.GET_MIDI_INTERFACE: self.env_GET_MIDI_INTERFACE,\n        EnvironmentCommand.GET_FASTFORWARDING: self.env_GET_FASTFORWARDING,\n        EnvironmentCommand.GET_TARGET_REFRESH_RATE: self.env_GET_TARGET_REFRESH_RATE,\n        EnvironmentCommand.GET_INPUT_BITMASKS: self.env_GET_INPUT_BITMASKS,\n        EnvironmentCommand.GET_CORE_OPTIONS_VERSION: self.env_GET_CORE_OPTIONS_VERSION,\n        EnvironmentCommand.SET_CORE_OPTIONS: self.env_SET_CORE_OPTIONS,\n        EnvironmentCommand.SET_CORE_OPTIONS_INTL: self.env_SET_CORE_OPTIONS_INTL,\n        EnvironmentCommand.SET_CORE_OPTIONS_DISPLAY: self.env_SET_CORE_OPTIONS_DISPLAY,\n        EnvironmentCommand.GET_PREFERRED_HW_RENDER: self.env_GET_PREFERRED_HW_RENDER,\n        EnvironmentCommand.GET_DISK_CONTROL_INTERFACE_VERSION: self.env_GET_DISK_CONTROL_INTERFACE_VERSION,\n        EnvironmentCommand.SET_DISK_CONTROL_EXT_INTERFACE: self.env_SET_DISK_CONTROL_EXT_INTERFACE,\n        EnvironmentCommand.GET_MESSAGE_INTERFACE_VERSION: self.env_GET_MESSAGE_INTERFACE_VERSION,\n        EnvironmentCommand.SET_MESSAGE_EXT: self.env_SET_MESSAGE_EXT,\n        EnvironmentCommand.GET_INPUT_MAX_USERS: self.env_GET_INPUT_MAX_USERS,\n        EnvironmentCommand.SET_AUDIO_BUFFER_STATUS_CALLBACK: self.env_SET_AUDIO_BUFFER_STATUS_CALLBACK,\n        EnvironmentCommand.SET_MINIMUM_AUDIO_LATENCY: self.env_SET_MINIMUM_AUDIO_LATENCY,\n        EnvironmentCommand.SET_FASTFORWARDING_OVERRIDE: self.env_SET_FASTFORWARDING_OVERRIDE,\n        EnvironmentCommand.SET_CONTENT_INFO_OVERRIDE: self.env_SET_CONTENT_INFO_OVERRIDE,\n        EnvironmentCommand.GET_GAME_INFO_EXT: self.env_GET_GAME_INFO_EXT,\n        EnvironmentCommand.SET_CORE_OPTIONS_V2: self.env_SET_CORE_OPTIONS_V2,\n        EnvironmentCommand.SET_CORE_OPTIONS_V2_INTL: self.env_SET_CORE_OPTIONS_V2_INTL,\n        EnvironmentCommand.SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK: self.env_SET_CORE_OPTIONS_UPDATE_DISPLAY_CALLBACK,\n        EnvironmentCommand.SET_VARIABLE: self.env_SET_VARIABLE,\n        EnvironmentCommand.GET_THROTTLE_STATE: self.env_GET_THROTTLE_STATE,\n        EnvironmentCommand.GET_SAVESTATE_CONTEXT: self.env_GET_SAVESTATE_CONTEXT,\n        EnvironmentCommand.GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT: self.env_GET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_SUPPORT,\n        EnvironmentCommand.GET_JIT_CAPABLE: self.env_GET_JIT_CAPABLE,\n        EnvironmentCommand.GET_MICROPHONE_INTERFACE: self.env_GET_MICROPHONE_INTERFACE,\n        EnvironmentCommand.GET_DEVICE_POWER: self.env_GET_DEVICE_POWER,\n        EnvironmentCommand.SET_NETPACKET_INTERFACE: self.env_SET_NETPACKET_INTERFACE,\n    }\n\n    # Create callback objects (and keep them in scope)\n    self.__cb_env = cb.environment_t(self.environment)\n    self.__cb_video = cb.video_refresh_t(self.video_refresh)\n    self.__cb_audio = cb.audio_sample_t(self.audio_sample)\n    self.__cb_audio_batch = cb.audio_sample_batch_t(self.audio_sample_batch)\n    self.__cb_input_poll = cb.input_poll_t(self.input_poll)\n    self.__cb_input_state = cb.input_state_t(self.input_state)\n\n    # Register callbacks\n    self.core.retro_set_environment(self.__cb_env)\n    self.core.retro_set_video_refresh(self.__cb_video)\n    self.core.retro_set_audio_sample(self.__cb_audio)\n    self.core.retro_set_audio_sample_batch(self.__cb_audio_batch)\n    self.core.retro_set_input_poll(self.__cb_input_poll)\n    self.core.retro_set_input_state(self.__cb_input_state)\n\n    # Initialize core\n    self.core.retro_init()\n\n    # Initialize (empty) memory pointer (get loaded on game load)\n    self.memory = RAM()\n\n    # Initialize cheats manager\n    self.cheats = CheatManager(\n        self.core.retro_cheat_set, self.core.retro_cheat_reset\n    )\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.audio_sample","title":"<code>audio_sample(left, right)</code>","text":"<p>New audio frame is available</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>int</code> <p>left audio channel</p> required <code>right</code> <code>int</code> <p>rigth audio channel</p> required Source code in <code>src/retropy/core/retro.py</code> <pre><code>def audio_sample(self, left: int, right: int) -&gt; None:\n    \"\"\"New audio frame is available\n\n    Args:\n        left (int): left audio channel\n        right (int): rigth audio channel\n    \"\"\"\n    logging.debug(\"Callback: audio_sample\")\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.audio_sample_batch","title":"<code>audio_sample_batch(data, frames)</code>","text":"<p>New audio frames are available</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>POINTER(c_uint16</code> <p>alternating left-right audio channels</p> required <code>frames</code> <code>int</code> <p>number of audio frames</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>?</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def audio_sample_batch(self, data: POINTER(c_int16), frames: int) -&gt; int:\n    \"\"\"New audio frames are available\n\n    Args:\n        data (POINTER(c_uint16)): alternating left-right audio channels\n        frames (int): number of audio frames\n\n    Returns:\n        int: ?\n    \"\"\"\n    logging.debug(\"Callback: audio_sample_batch\")\n\n    return 0\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.environment","title":"<code>environment(cmd, data)</code>","text":"<p>Handle diverse tasks</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>int</code> <p>Command identifier (<code>RETRO_ENVIRONMENT</code>)</p> required <code>data</code> <code>c_void_p</code> <p>Must be cast to correct type</p> required <p><code>data</code> has no type so it automatically recieves type when cast</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Meaning depending on command. Return <code>False</code> to commonly mean a command is not supported / indicate success of action.</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def environment(self, cmd: int, data) -&gt; bool:\n    \"\"\"Handle diverse tasks\n\n    Args:\n        cmd (int): Command identifier (`RETRO_ENVIRONMENT`)\n        data (c_void_p): Must be cast to correct type\n\n    `data` has no type so it automatically recieves type when cast\n\n    Returns:\n        bool: Meaning depending on command. Return `False` to **commonly** mean a command is not supported / indicate success of action.\n    \"\"\"\n\n    func = self.env_cmd.get(cmd, None)\n\n    if func:\n        return func(data)\n\n    logging.warning(\n        f\"Unknown Command - cmd={cmd} (0x{cmd:X}): Consider reading the documentation / source code of the current core to support custom environment commands\"\n    )\n\n    return False\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.frame_advance","title":"<code>frame_advance()</code>","text":"<p>Run core for a single video frame</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def frame_advance(self):\n    \"\"\"\n    Run core for a single video frame\n    \"\"\"\n    self.core.retro_run()\n    return self.last_frame\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.input_poll","title":"<code>input_poll()</code>","text":"<p>Read frontend input</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def input_poll(self) -&gt; None:\n    \"\"\"Read frontend input\"\"\"\n    logging.debug(\"Callback: input_poll\")\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.input_state","title":"<code>input_state(port, device, index, id)</code>","text":"<p>Pass values of <code>input_poll</code> to core</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>Player</p> required <code>device</code> <code>int</code> <p>Device identifier (<code>Device</code>)</p> required <code>index</code> <code>int</code> <p>Only used for analog device</p> required <code>id</code> <code>int</code> <p>Action ID</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Value of input action</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def input_state(self, port: int, device: int, index: int, id: int) -&gt; int:\n    \"\"\"Pass values of `input_poll` to core\n\n    Args:\n        port (int): Player\n        device (int): Device identifier (`Device`)\n        index (int): Only used for analog device\n        id (int): Action ID\n\n    Returns:\n        int: Value of input action\n    \"\"\"\n\n    value = self.controllers[port].get_state(device, index, id)\n\n    logging.debug(\"Callback: input_state\")\n    return value\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.load","title":"<code>load(path)</code>","text":"<p>Load a game from ROM</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Parh to ROM</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>rom file does not exist</p> <code>InvalidRomError</code> <p>rom file cannot be processed</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def load(self, path: str):\n    \"\"\"Load a game from ROM\n\n    Args:\n        path (str): Parh to ROM\n\n    Raises:\n        FileNotFoundError: rom file does not exist\n        InvalidRomError: rom file cannot be processed\n    \"\"\"\n\n    if self.loaded:\n        logging.debug(\"Game already loaded\")\n        return\n\n    romPath = Path(path).resolve()\n    if not romPath.is_file():\n        raise FileNotFoundError(f\"`path` ({romPath}) is not a file\")\n\n    game = GameInfo(\n        path=str(romPath).encode(\"utf-8\"), data=None, size=0, meta=b\"metadata\"\n    )\n\n    self.loaded = bool(self.core.retro_load_game(byref(game)))\n\n    if not self.loaded:\n        raise InvalidRomError(\n            f\"file '{game.path.decode('utf-8')}' cannot be loaded\"\n        )\n\n    # Get Memory Pointer\n\n    def set_ptr(region, name):\n        size: int = self.core.retro_get_memory_size(region)\n        ptr: c_void_p = self.core.retro_get_memory_data(region)\n\n        if size &gt; 0 and ptr is not None:\n            ptr = cast(ptr, POINTER(c_ubyte))\n            setattr(self.memory, name, InternalMemory(ptr, size))\n\n    set_ptr(MemoryRegion.SAVE_RAM, \"save\")\n    set_ptr(MemoryRegion.RTC, \"rtc\")\n    set_ptr(MemoryRegion.SYSTEM_RAM, \"system\")\n    set_ptr(MemoryRegion.VIDEO_RAM, \"video\")\n\n    logging.info(\"Game loaded\")\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.load_state","title":"<code>load_state(savestate)</code>","text":"<p>Load previously saved core state</p> <p>Parameters:</p> Name Type Description Default <code>savestate</code> <code>Savestate</code> <p>state to load</p> required <p>Raises:</p> Type Description <code>SavestateError</code> <p>Loading savestate failed</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def load_state(self, savestate: Savestate):\n    \"\"\"Load previously saved core state\n\n    Args:\n        savestate (Savestate): state to load\n\n    Raises:\n        SavestateError: Loading savestate failed\n    \"\"\"\n\n    if not bool(self.core.retro_unserialize(savestate.data, savestate.size)):\n        raise SavestateError(\"Loading savestate failed\")\n\n    logging.info(f\"State loaded\")\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.region","title":"<code>region()</code>","text":"<p>Retrieve cores regional code</p> <p>Returns:</p> Name Type Description <code>Region</code> <code>Region</code> <p>region</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def region(self) -&gt; Region:\n    \"\"\"Retrieve cores regional code\n\n    Returns:\n        Region: region\n    \"\"\"\n    return Region(self.core.retro_get_region())\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.reset","title":"<code>reset()</code>","text":"<p>Reset current game to intial state</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def reset(self):\n    \"\"\"\n    Reset current game to intial state\n    \"\"\"\n    self.core.retro_reset()\n    logging.info(\"Game reset\")\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.save_state","title":"<code>save_state()</code>","text":"<p>Save current core state</p> <p>Raises:</p> Type Description <code>SavestateError</code> <p>Creating savestate failed</p> <p>Returns:</p> Name Type Description <code>Savestate</code> <code>Savestate</code> <p>Savestate data</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def save_state(self) -&gt; Savestate:\n    \"\"\"Save current core state\n\n    Raises:\n        SavestateError: Creating savestate failed\n\n    Returns:\n        Savestate: Savestate data\n    \"\"\"\n\n    size = self.core.retro_serialize_size()\n    save = Savestate(size)\n\n    if not bool(self.core.retro_serialize(save.data, save.size)):\n        raise SavestateError(\"Creating savestate failed\")\n\n    logging.info(f\"State saved\")\n\n    return save\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.system_av_info","title":"<code>system_av_info()</code>","text":"<p>Retrieve cores system information specific for a game</p> <p>Returns:</p> Name Type Description <code>SystemAvInfo</code> <code>SystemAvInfo</code> <p>core information</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def system_av_info(self) -&gt; SystemAvInfo:\n    \"\"\"Retrieve cores system information specific for a game\n\n    Returns:\n        SystemAvInfo: core information\n    \"\"\"\n    info = SystemAvInfo()\n    self.core.retro_get_system_av_info(byref(info))\n    return info\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.system_info","title":"<code>system_info()</code>","text":"<p>Retrieve cores system information</p> <p>Returns:</p> Name Type Description <code>SystemInfo</code> <code>SystemInfo</code> <p>core information</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def system_info(self) -&gt; SystemInfo:\n    \"\"\"Retrieve cores system information\n\n    Returns:\n        SystemInfo: core information\n    \"\"\"\n    info = SystemInfo()\n    self.core.retro_get_system_info(byref(info))\n    return info\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.unload","title":"<code>unload()</code>","text":"<p>Unload current game</p> <p>Must be called before loading another game</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def unload(self):\n    \"\"\"Unload current game\n\n    Must be called before loading another game\n    \"\"\"\n    self.core.retro_unload_game()\n    self.loaded = False\n\n    self.memory._clear()\n    self.cheats._clear()\n\n    logging.info(\"Game unloaded\")\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.version","title":"<code>version()</code>","text":"<p>Retrieve API version</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>version</p> Source code in <code>src/retropy/core/retro.py</code> <pre><code>def version(self) -&gt; int:\n    \"\"\"Retrieve API version\n\n    Returns:\n        int: version\n    \"\"\"\n    return self.core.retro_api_version()\n</code></pre>"},{"location":"reference/retropy/core/retro/#retropy.core.retro.RetroPy.video_refresh","title":"<code>video_refresh(data, width, height, pitch)</code>","text":"<p>A new video frame is available</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>c_void_p</code> <p>framebuffer (must be cast into correct format)</p> required <code>width</code> <code>int</code> <p>width of frame</p> required <code>height</code> <code>int</code> <p>height of frame</p> required <code>pitch</code> <code>int</code> <p>pitch of frame line</p> required Source code in <code>src/retropy/core/retro.py</code> <pre><code>def video_refresh(self, data, width: int, height: int, pitch: int) -&gt; None:\n    \"\"\"A new video frame is available\n\n    Args:\n        data (c_void_p): framebuffer (must be cast into correct format)\n        width (int): width of frame\n        height (int): height of frame\n        pitch (int): pitch of frame line\n    \"\"\"\n    logging.debug(\"Callback: video_refresh\")\n\n    # Data may be NULL if GET_CAN_DUPE returns true (libretro.h: 4381)\n    if not data:\n        return\n\n    self.last_frame = buffer_to_frame(\n        data, (height, width, pitch), self.pixel_format, numpy=self.numpy\n    )\n</code></pre>"},{"location":"reference/retropy/core/skeleton/","title":"skeleton","text":""},{"location":"reference/retropy/core/audio/","title":"audio","text":""},{"location":"reference/retropy/core/audio/#retropy.core.audio.audio_buffer_status_callback_t","title":"<code>audio_buffer_status_callback_t = CFUNCTYPE(None, c_bool, c_uint, c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_audio_buffer_status_callback_t</p>"},{"location":"reference/retropy/core/audio/#retropy.core.audio.audio_callback_t","title":"<code>audio_callback_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_audio_callback_t</p>"},{"location":"reference/retropy/core/audio/#retropy.core.audio.audio_set_state_callback_t","title":"<code>audio_set_state_callback_t = CFUNCTYPE(None, c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_audio_set_state_callback_t</p>"},{"location":"reference/retropy/core/audio/#retropy.core.audio.AudioBufferStatusCallback","title":"<code>AudioBufferStatusCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_audio_buffer_status_callback</p> Source code in <code>src/retropy/core/audio/__init__.py</code> <pre><code>class AudioBufferStatusCallback(Structure):\n    \"\"\"retro_audio_buffer_status_callback\"\"\"\n\n    _fields_ = [\n        (\"callback\", audio_buffer_status_callback_t),\n    ]\n\n    callback: Callable[[bool, int, bool], None]\n</code></pre>"},{"location":"reference/retropy/core/audio/#retropy.core.audio.AudioCallback","title":"<code>AudioCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_audio_callback</p> Source code in <code>src/retropy/core/audio/__init__.py</code> <pre><code>class AudioCallback(Structure):\n    \"\"\"retro_audio_callback\"\"\"\n\n    _fields_ = [\n        (\"callback\", audio_callback_t),\n        (\"set_state\", audio_set_state_callback_t),\n    ]\n\n    callback: Callable[[None], None]\n    set_state: Callable[[bool], None]\n</code></pre>"},{"location":"reference/retropy/core/audio/microphone/","title":"microphone","text":""},{"location":"reference/retropy/core/audio/midi/","title":"midi","text":""},{"location":"reference/retropy/core/audio/midi/#retropy.core.audio.midi.midi_flush_t","title":"<code>midi_flush_t = CFUNCTYPE(c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_midi_flush_t</p>"},{"location":"reference/retropy/core/audio/midi/#retropy.core.audio.midi.midi_input_enabled_t","title":"<code>midi_input_enabled_t = CFUNCTYPE(c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_midi_input_enabled_t</p>"},{"location":"reference/retropy/core/audio/midi/#retropy.core.audio.midi.midi_output_enabled_t","title":"<code>midi_output_enabled_t = CFUNCTYPE(c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_midi_output_enabled_t</p>"},{"location":"reference/retropy/core/audio/midi/#retropy.core.audio.midi.midi_read_t","title":"<code>midi_read_t = CFUNCTYPE(c_bool, POINTER(c_uint8))</code>  <code>module-attribute</code>","text":"<p>retro_midi_read_t</p>"},{"location":"reference/retropy/core/audio/midi/#retropy.core.audio.midi.midi_write_t","title":"<code>midi_write_t = CFUNCTYPE(c_bool, c_uint8, c_uint32)</code>  <code>module-attribute</code>","text":"<p>retro_midi_write_t</p>"},{"location":"reference/retropy/core/audio/midi/#retropy.core.audio.midi.MidiInterface","title":"<code>MidiInterface</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_midi_interface</p> Source code in <code>src/retropy/core/audio/midi.py</code> <pre><code>class MidiInterface(Structure):\n    \"\"\"retro_midi_interface\"\"\"\n\n    _fields_ = [\n        (\"input_enabled\", midi_input_enabled_t),\n        (\"output_enabled\", midi_output_enabled_t),\n        (\"read\", midi_read_t),\n        (\"write\", midi_write_t),\n        (\"flush\", midi_flush_t),\n    ]\n\n    interface_type: Callable[[None], bool]\n    output_enabled: Callable[[None], bool]\n    read: Callable[[POINTER(c_uint8)], bool]\n    write: Callable[[int, int], bool]\n    flush: Callable[[None], bool]\n</code></pre>"},{"location":"reference/retropy/core/device/","title":"device","text":""},{"location":"reference/retropy/core/device/#retropy.core.device.Analog","title":"<code>Analog</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>RETRO_DEVICE_ID_ANALOG_</p> Source code in <code>src/retropy/core/device/__init__.py</code> <pre><code>class Analog(IntEnum):\n    \"\"\"RETRO_DEVICE_ID_ANALOG_\"\"\"\n\n    X = 0\n    Y = 1\n</code></pre>"},{"location":"reference/retropy/core/device/#retropy.core.device.AnalogIdx","title":"<code>AnalogIdx</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>RETRO_DEVICE_INDEX_ANALOG_</p> Source code in <code>src/retropy/core/device/__init__.py</code> <pre><code>class AnalogIdx(IntEnum):\n    \"\"\"RETRO_DEVICE_INDEX_ANALOG_\"\"\"\n\n    LEFT_STICK = 0\n    RIGHT_STICK = 1\n    BUTTONS = 2\n</code></pre>"},{"location":"reference/retropy/core/device/#retropy.core.device.Device","title":"<code>Device</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>RETRO_DEVICE_</p> Source code in <code>src/retropy/core/device/__init__.py</code> <pre><code>class Device(IntEnum):\n    \"\"\"RETRO_DEVICE_\"\"\"\n\n    NONE = 0\n    JOYPAD = 1\n    # MOUSE = 2\n    # KEYBOARD = 3\n    # LIGHTGUN = 4\n    ANALOG = 5\n</code></pre>"},{"location":"reference/retropy/core/device/#retropy.core.device.InputDescriptor","title":"<code>InputDescriptor</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_input_descriptor</p> Source code in <code>src/retropy/core/device/__init__.py</code> <pre><code>class InputDescriptor(Structure):\n    \"\"\"retro_input_descriptor\"\"\"\n\n    _fields_ = [\n        (\"port\", c_uint),\n        (\"device\", c_uint),\n        (\"index\", c_uint),\n        (\"id\", c_uint),\n        (\"description\", c_char_p),\n    ]\n\n    port: int\n    device: int\n    index: int\n    id: int\n    description: bytes\n</code></pre>"},{"location":"reference/retropy/core/device/#retropy.core.device.Joypad","title":"<code>Joypad</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>RETRO_DEVICE_ID_JOYPAD_</p> Source code in <code>src/retropy/core/device/__init__.py</code> <pre><code>class Joypad(IntEnum):\n    \"\"\"RETRO_DEVICE_ID_JOYPAD_\"\"\"\n\n    B = 0\n    Y = 1\n    SELECT = 2\n    START = 3\n    UP = 4\n    DOWN = 5\n    LEFT = 6\n    RIGHT = 7\n    A = 8\n    X = 9\n    L = 10\n    R = 11\n    L2 = 12\n    R2 = 13\n    L3 = 14\n    R3 = 15\n</code></pre>"},{"location":"reference/retropy/core/device/camera/","title":"camera","text":""},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.camera_frame_opengl_texture_t","title":"<code>camera_frame_opengl_texture_t = CFUNCTYPE(None, c_uint, c_uint, POINTER(c_float))</code>  <code>module-attribute</code>","text":"<p>retro_camera_frame_opengl_texture_t</p>"},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.camera_frame_raw_framebuffer_t","title":"<code>camera_frame_raw_framebuffer_t = CFUNCTYPE(None, POINTER(c_uint32), c_uint, c_uint, c_size_t)</code>  <code>module-attribute</code>","text":"<p>retro_camera_frame_raw_framebuffer_t</p>"},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.camera_lifetime_status_t","title":"<code>camera_lifetime_status_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_camera_lifetime_status_t</p>"},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.camera_start_t","title":"<code>camera_start_t = CFUNCTYPE(c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_camera_start_t</p>"},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.camera_stop_t","title":"<code>camera_stop_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_camera_stop_t</p>"},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.BufferType","title":"<code>BufferType</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>retro_camera_buffer</p> Source code in <code>src/retropy/core/device/camera.py</code> <pre><code>class BufferType(IntFlag):\n    \"\"\"retro_camera_buffer\"\"\"\n\n    OPENGL_TEXTURE = 1 &lt;&lt; 0\n    RAW_FRAMEBUFFER = 1 &lt;&lt; 1\n</code></pre>"},{"location":"reference/retropy/core/device/camera/#retropy.core.device.camera.CameraCallback","title":"<code>CameraCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_camera_callback</p> Source code in <code>src/retropy/core/device/camera.py</code> <pre><code>class CameraCallback(Structure):\n    \"\"\"retro_camera_callback\"\"\"\n\n    _fields_ = [\n        (\"caps\", c_uint64),\n        (\"width\", c_uint),\n        (\"height\", c_uint),\n        (\"start\", camera_start_t),\n        (\"stop\", camera_stop_t),\n        (\"frame_raw_framebuffer\", camera_frame_raw_framebuffer_t),\n        (\"frame_opengl_texture\", camera_frame_opengl_texture_t),\n        (\"initialized\", camera_lifetime_status_t),\n        (\"deinitialized\", camera_lifetime_status_t),\n    ]\n\n    caps: int\n    width: int\n    height: int\n    start: Callable[[None], bool]\n    stop: Callable[[None], None]\n    frame_raw_framebuffer: Callable[[POINTER(c_uint32), int, int, int], None]\n    frame_opengl_texture: Callable[[int, int, POINTER(c_float)], None]\n    initialized: Callable[[None], None]\n    deinitialized: Callable[[None], None]\n</code></pre>"},{"location":"reference/retropy/core/device/controller/","title":"controller","text":""},{"location":"reference/retropy/core/device/controller/#retropy.core.device.controller.ControllerDescription","title":"<code>ControllerDescription</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_controller_description</p> Source code in <code>src/retropy/core/device/controller.py</code> <pre><code>class ControllerDescription(Structure):\n    \"\"\"retro_controller_description\"\"\"\n\n    _fields_ = [(\"desc\", c_char_p), (\"id\", c_uint)]\n\n    desc: bytes\n    id: int\n</code></pre>"},{"location":"reference/retropy/core/device/controller/#retropy.core.device.controller.ControllerInfo","title":"<code>ControllerInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_controller_info</p> Source code in <code>src/retropy/core/device/controller.py</code> <pre><code>class ControllerInfo(Structure):\n    \"\"\"retro_controller_info\"\"\"\n\n    _fields_ = [(\"types\", POINTER(ControllerDescription)), (\"num_types\", c_uint)]\n\n    types: POINTER(ControllerDescription)\n    num_types: int\n</code></pre>"},{"location":"reference/retropy/core/device/keyboard/","title":"keyboard","text":""},{"location":"reference/retropy/core/device/keyboard/#retropy.core.device.keyboard.keyboard_event_t","title":"<code>keyboard_event_t = CFUNCTYPE(None, c_bool, c_uint, c_uint32, c_uint16)</code>  <code>module-attribute</code>","text":"<p>retro_keyboard_event_t</p>"},{"location":"reference/retropy/core/device/keyboard/#retropy.core.device.keyboard.Key","title":"<code>Key</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_key</p> Source code in <code>src/retropy/core/device/keyboard.py</code> <pre><code>class Key(Enum):\n    \"\"\"retro_key\"\"\"\n\n    UNKNOWN = 0\n    FIRST = 0\n    BACKSPACE = 8\n    TAB = 9\n    CLEAR = 12\n    RETURN = 13\n    PAUSE = 19\n    ESCAPE = 27\n    SPACE = 32\n    EXCLAIM = 33\n    QUOTEDBL = 34\n    HASH = 35\n    DOLLAR = 36\n    AMPERSAND = 38\n    QUOTE = 39\n    LEFTPAREN = 40\n    RIGHTPAREN = 41\n    ASTERISK = 42\n    PLUS = 43\n    COMMA = 44\n    MINUS = 45\n    PERIOD = 46\n    SLASH = 47\n    K0 = 48\n    K1 = 49\n    K2 = 50\n    K3 = 51\n    K4 = 52\n    K5 = 53\n    K6 = 54\n    K7 = 55\n    K8 = 56\n    K9 = 57\n    COLON = 58\n    SEMICOLON = 59\n    LESS = 60\n    EQUALS = 61\n    GREATER = 62\n    QUESTION = 63\n    AT = 64\n    LEFTBRACKET = 91\n    BACKSLASH = 92\n    RIGHTBRACKET = 93\n    CARET = 94\n    UNDERSCORE = 95\n    BACKQUOTE = 96\n    a = 97\n    b = 98\n    c = 99\n    d = 100\n    e = 101\n    f = 102\n    g = 103\n    h = 104\n    i = 105\n    j = 106\n    k = 107\n    l = 108\n    m = 109\n    n = 110\n    o = 111\n    p = 112\n    q = 113\n    r = 114\n    s = 115\n    t = 116\n    u = 117\n    v = 118\n    w = 119\n    x = 120\n    y = 121\n    z = 122\n    LEFTBRACE = 123\n    BAR = 124\n    RIGHTBRACE = 125\n    TILDE = 126\n    DELETE = 127\n\n    KP0 = 256\n    KP1 = 257\n    KP2 = 258\n    KP3 = 259\n    KP4 = 260\n    KP5 = 261\n    KP6 = 262\n    KP7 = 263\n    KP8 = 264\n    KP9 = 265\n    KP_PERIOD = 266\n    KP_DIVIDE = 267\n    KP_MULTIPLY = 268\n    KP_MINUS = 269\n    KP_PLUS = 270\n    KP_ENTER = 271\n    KP_EQUALS = 272\n\n    UP = 273\n    DOWN = 274\n    RIGHT = 275\n    LEFT = 276\n    INSERT = 277\n    HOME = 278\n    END = 279\n    PAGEUP = 280\n    PAGEDOWN = 281\n\n    F1 = 282\n    F2 = 283\n    F3 = 284\n    F4 = 285\n    F5 = 286\n    F6 = 287\n    F7 = 288\n    F8 = 289\n    F9 = 290\n    F10 = 291\n    F11 = 292\n    F12 = 293\n    F13 = 294\n    F14 = 295\n    F15 = 296\n\n    NUMLOCK = 300\n    CAPSLOCK = 301\n    SCROLLOCK = 302\n    RSHIFT = 303\n    LSHIFT = 304\n    RCTRL = 305\n    LCTRL = 306\n    RALT = 307\n    LALT = 308\n    RMETA = 309\n    LMETA = 310\n    LSUPER = 311\n    RSUPER = 312\n    MODE = 313\n    COMPOSE = 314\n\n    HELP = 315\n    PRINT = 316\n    SYSREQ = 317\n    BREAK = 318\n    MENU = 319\n    POWER = 320\n    EURO = 321\n    UNDO = 322\n    OEM_102 = 323\n</code></pre>"},{"location":"reference/retropy/core/device/keyboard/#retropy.core.device.keyboard.KeyboardCallback","title":"<code>KeyboardCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_keyboard_callback</p> Source code in <code>src/retropy/core/device/keyboard.py</code> <pre><code>class KeyboardCallback(Structure):\n    \"\"\"retro_keyboard_callback\"\"\"\n\n    _fields_ = [\n        (\"callback\", keyboard_event_t),\n    ]\n\n    callback: Callable[[bool, int, int, int], None]\n</code></pre>"},{"location":"reference/retropy/core/device/keyboard/#retropy.core.device.keyboard.Mod","title":"<code>Mod</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_mod</p> Source code in <code>src/retropy/core/device/keyboard.py</code> <pre><code>class Mod(Enum):\n    \"\"\"retro_mod\"\"\"\n\n    NONE = 0x00\n    SHIFT = 0x01\n    CTRL = 0x02\n    ALT = 0x04\n    META = 0x08\n    NUMLOCK = 0x10\n    CAPSLOCK = 0x20\n    SCROLLOCK = 0x40\n</code></pre>"},{"location":"reference/retropy/core/device/location/","title":"location","text":""},{"location":"reference/retropy/core/device/location/#retropy.core.device.location.location_get_position_t","title":"<code>location_get_position_t = CFUNCTYPE(c_bool, POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double))</code>  <code>module-attribute</code>","text":"<p>retro_location_get_position_t</p>"},{"location":"reference/retropy/core/device/location/#retropy.core.device.location.location_lifetime_status_t","title":"<code>location_lifetime_status_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_location_lifetime_status_t</p>"},{"location":"reference/retropy/core/device/location/#retropy.core.device.location.location_set_interval_t","title":"<code>location_set_interval_t = CFUNCTYPE(None, c_uint, c_uint)</code>  <code>module-attribute</code>","text":"<p>retro_location_set_interval_t</p>"},{"location":"reference/retropy/core/device/location/#retropy.core.device.location.location_start_t","title":"<code>location_start_t = CFUNCTYPE(c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_location_start_t</p>"},{"location":"reference/retropy/core/device/location/#retropy.core.device.location.location_stop_t","title":"<code>location_stop_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_location_stop_t</p>"},{"location":"reference/retropy/core/device/location/#retropy.core.device.location.LocationCallback","title":"<code>LocationCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_location_callback</p> Source code in <code>src/retropy/core/device/location.py</code> <pre><code>class LocationCallback(Structure):\n    \"\"\"retro_location_callback\"\"\"\n\n    _fields_ = [\n        (\"start\", location_start_t),\n        (\"stop\", location_stop_t),\n        (\"get_position\", location_get_position_t),\n        (\"set_interval\", location_set_interval_t),\n        (\"initialized\", location_lifetime_status_t),\n        (\"deinitialized\", location_lifetime_status_t),\n    ]\n\n    start: Callable[[None], bool]\n    stop: Callable[[None], None]\n    get_position: Callable[\n        [POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double)],\n        c_bool,\n    ]\n    set_interval: Callable[[int, int], None]\n    initialized: Callable[[None], None]\n    deinitialized: Callable[[None], None]\n</code></pre>"},{"location":"reference/retropy/core/device/rumble/","title":"rumble","text":""},{"location":"reference/retropy/core/device/rumble/#retropy.core.device.rumble.set_rumble_state_t","title":"<code>set_rumble_state_t = CFUNCTYPE(c_bool, c_uint, c_int, c_uint16)</code>  <code>module-attribute</code>","text":"<p>retro_set_rumble_state_t</p>"},{"location":"reference/retropy/core/device/rumble/#retropy.core.device.rumble.RumbleInterface","title":"<code>RumbleInterface</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_rumble_interface</p> Source code in <code>src/retropy/core/device/rumble.py</code> <pre><code>class RumbleInterface(Structure):\n    \"\"\"retro_rumble_interface\"\"\"\n    _fields_ = [\n        ('set_rumble_state', set_rumble_state_t),\n    ]\n\n    set_rumble_state: Callable[[int, int, int], bool]\n</code></pre>"},{"location":"reference/retropy/core/device/sensor/","title":"sensor","text":""},{"location":"reference/retropy/core/device/sensor/#retropy.core.device.sensor.sensor_get_input_t","title":"<code>sensor_get_input_t = CFUNCTYPE(c_float, c_uint, c_uint)</code>  <code>module-attribute</code>","text":"<p>retro_sensor_get_input_t</p>"},{"location":"reference/retropy/core/device/sensor/#retropy.core.device.sensor.set_sensor_state_t","title":"<code>set_sensor_state_t = CFUNCTYPE(c_bool, c_uint, c_int32, c_uint)</code>  <code>module-attribute</code>","text":"<p>retro_set_sensor_state_t</p>"},{"location":"reference/retropy/core/device/sensor/#retropy.core.device.sensor.SensorAction","title":"<code>SensorAction</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_sensor_action</p> Source code in <code>src/retropy/core/device/sensor.py</code> <pre><code>class SensorAction(Enum):\n    \"\"\"retro_sensor_action\"\"\"\n\n    ACCELEROMETER_ENABLE = 0\n    ACCELEROMETER_DISABLE = 1\n    GYROSCOPE_ENABLE = 2\n    GYROSCOPE_DISABLE = 3\n    ILLUMINANCE_ENABLE = 4\n    ILLUMINANCE_DISABLE = 5\n</code></pre>"},{"location":"reference/retropy/core/device/sensor/#retropy.core.device.sensor.SensorInterface","title":"<code>SensorInterface</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_sensor_interface</p> Source code in <code>src/retropy/core/device/sensor.py</code> <pre><code>class SensorInterface(Structure):\n    \"\"\"retro_sensor_interface\"\"\"\n\n    _fields_ = [\n        (\"set_sensor_state\", set_sensor_state_t),\n        (\"get_sensor_state\", set_sensor_state_t),\n    ]\n\n    set_sensor_state: Callable[[int, int, int], bool]\n    get_sensor_state: Callable[[int, int], float]\n</code></pre>"},{"location":"reference/retropy/core/device/sensor/#retropy.core.device.sensor.SensorTypes","title":"<code>SensorTypes</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RETRO_SENSOR_</p> Source code in <code>src/retropy/core/device/sensor.py</code> <pre><code>class SensorTypes(Enum):\n    \"\"\"RETRO_SENSOR_\"\"\"\n\n    ACCELEROMETER_X = 0\n    ACCELEROMETER_Y = 1\n    ACCELEROMETER_Z = 2\n    GYROSCOPE_X = 3\n    GYROSCOPE_Y = 4\n    GYROSCOPE_Z = 5\n    ILLUMINANCE = 6\n</code></pre>"},{"location":"reference/retropy/core/game/","title":"game","text":""},{"location":"reference/retropy/core/game/#retropy.core.game.GameGeometry","title":"<code>GameGeometry</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_game_geometry</p> Source code in <code>src/retropy/core/game/__init__.py</code> <pre><code>class GameGeometry(Structure):\n    \"\"\"retro_game_geometry\"\"\"\n\n    _fields_ = [\n        (\"base_width\", c_uint),\n        (\"base_height\", c_uint),\n        (\"max_width\", c_uint),\n        (\"max_height\", c_uint),\n        (\"aspect_ratio\", c_float),\n    ]\n\n    base_width: int\n    base_height: int\n    max_width: int\n    max_height: int\n    aspect_ratio: float\n</code></pre>"},{"location":"reference/retropy/core/game/#retropy.core.game.GameInfo","title":"<code>GameInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_game_info</p> Source code in <code>src/retropy/core/game/__init__.py</code> <pre><code>class GameInfo(Structure):\n    \"\"\"retro_game_info\"\"\"\n\n    _fields_ = [\n        (\"path\", c_char_p),\n        (\"data\", c_void_p),\n        (\"size\", c_size_t),\n        (\"meta\", c_char_p),\n    ]\n\n    path: bytes\n    data: c_void_p\n    size: int\n    meta: bytes\n</code></pre>"},{"location":"reference/retropy/core/game/#retropy.core.game.GameInfoExt","title":"<code>GameInfoExt</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_game_info_ext</p> Source code in <code>src/retropy/core/game/__init__.py</code> <pre><code>class GameInfoExt(Structure):\n    \"\"\"retro_game_info_ext\"\"\"\n\n    _fields_ = [\n        (\"full_path\", c_char_p),\n        (\"archive_path\", c_char_p),\n        (\"archive_file\", c_char_p),\n        (\"dir\", c_char_p),\n        (\"name\", c_char_p),\n        (\"ext\", c_char_p),\n        (\"meta\", c_char_p),\n        (\"data\", c_void_p),\n        (\"size\", c_size_t),\n        (\"file_in_archive\", c_bool),\n        (\"persistent_data\", c_bool),\n    ]\n\n    full_path: bytes\n    archive_path: bytes\n    archive_file: bytes\n    dir: bytes\n    name: bytes\n    ext: bytes\n    meta: bytes\n    data: c_void_p\n    size: int\n    file_in_archive: bool\n    persistent_data: bool\n</code></pre>"},{"location":"reference/retropy/core/game/disk/","title":"disk","text":""},{"location":"reference/retropy/core/options/","title":"options","text":""},{"location":"reference/retropy/core/options/#retropy.core.options.VALUES_MAX","title":"<code>VALUES_MAX = 128</code>  <code>module-attribute</code>","text":"<p>RETRO_NUM_CORE_OPTION_VALUES_MAX</p>"},{"location":"reference/retropy/core/options/#retropy.core.options.core_options_update_display_callback_t","title":"<code>core_options_update_display_callback_t = CFUNCTYPE(c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_core_options_update_display_callback_t</p>"},{"location":"reference/retropy/core/options/#retropy.core.options.OptionValue","title":"<code>OptionValue</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_option_value</p> Source code in <code>src/retropy/core/options/__init__.py</code> <pre><code>class OptionValue(Structure):\n    \"\"\"retro_core_option_value\"\"\"\n\n    _fields_ = [\n        (\"value\", c_char_p),\n        (\"label\", c_char_p),\n    ]\n\n    value: bytes\n    label: bytes\n</code></pre>"},{"location":"reference/retropy/core/options/#retropy.core.options.OptionsDisplay","title":"<code>OptionsDisplay</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_option_display</p> Source code in <code>src/retropy/core/options/__init__.py</code> <pre><code>class OptionsDisplay(Structure):\n    \"\"\"retro_core_option_display\"\"\"\n\n    _fields_ = [\n        (\"key\", c_char_p),\n        (\"visible\", c_bool),\n    ]\n\n    key: bytes\n    visible: c_bool\n</code></pre>"},{"location":"reference/retropy/core/options/#retropy.core.options.UpdateOptionsDisplayCallback","title":"<code>UpdateOptionsDisplayCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_options_update_display_callback</p> Source code in <code>src/retropy/core/options/__init__.py</code> <pre><code>class UpdateOptionsDisplayCallback(Structure):\n    \"\"\"retro_core_options_update_display_callback\"\"\"\n\n    _fields_ = [\n        (\"callback\", core_options_update_display_callback_t),\n    ]\n\n    callback: Callable[[None], bool]\n</code></pre>"},{"location":"reference/retropy/core/options/v1/","title":"v1","text":""},{"location":"reference/retropy/core/options/v1/#retropy.core.options.v1.OptionDefinition","title":"<code>OptionDefinition</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_option_definition</p> Source code in <code>src/retropy/core/options/v1.py</code> <pre><code>class OptionDefinition(Structure):\n    \"\"\"retro_core_option_definition\"\"\"\n\n    _fields_ = [\n        (\"key\", c_char_p),\n        (\"desc\", c_char_p),\n        (\"info\", c_char_p),\n        (\"values\", OptionValue * VALUES_MAX),\n        (\"default_value\", c_char_p),\n    ]\n\n    key: bytes\n    desc: bytes\n    info: bytes\n    values: POINTER(OptionValue)\n    default_value: bytes\n</code></pre>"},{"location":"reference/retropy/core/options/v1/#retropy.core.options.v1.OptionIntl","title":"<code>OptionIntl</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_options_intl</p> Source code in <code>src/retropy/core/options/v1.py</code> <pre><code>class OptionIntl(Structure):\n    \"\"\"retro_core_options_intl\"\"\"\n\n    _fields_ = [\n        (\"us\", POINTER(OptionDefinition)),\n        (\"local\", POINTER(OptionDefinition)),\n    ]\n\n    us: POINTER(OptionDefinition)\n    local: POINTER(OptionDefinition)\n</code></pre>"},{"location":"reference/retropy/core/options/v2/","title":"v2","text":""},{"location":"reference/retropy/core/options/v2/#retropy.core.options.v2.CoreOptions","title":"<code>CoreOptions</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_options_v2</p> Source code in <code>src/retropy/core/options/v2.py</code> <pre><code>class CoreOptions(Structure):\n    \"\"\"retro_core_options_v2\"\"\"\n\n    _fields_ = [\n        (\"categories\", POINTER(OptionCategory)),\n        (\"definitions\", POINTER(OptionDefinition)),\n    ]\n\n    categories: POINTER(OptionCategory)\n    definitions: POINTER(OptionDefinition)\n</code></pre>"},{"location":"reference/retropy/core/options/v2/#retropy.core.options.v2.OptionCategory","title":"<code>OptionCategory</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_option_v2_category</p> Source code in <code>src/retropy/core/options/v2.py</code> <pre><code>class OptionCategory(Structure):\n    \"\"\"retro_core_option_v2_category\"\"\"\n\n    _fields_ = [\n        (\"key\", c_char_p),\n        (\"desc\", c_char_p),\n        (\"info\", c_char_p),\n    ]\n\n    key: bytes\n    desc: bytes\n    info: bytes\n</code></pre>"},{"location":"reference/retropy/core/options/v2/#retropy.core.options.v2.OptionDefinition","title":"<code>OptionDefinition</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_option_v2_definition</p> Source code in <code>src/retropy/core/options/v2.py</code> <pre><code>class OptionDefinition(Structure):\n    \"\"\"retro_core_option_v2_definition\"\"\"\n\n    _fields_ = [\n        (\"key\", c_char_p),\n        (\"desc\", c_char_p),\n        (\"desc_categorized\", c_char_p),\n        (\"info\", c_char_p),\n        (\"info_categorized\", c_char_p),\n        (\"category_key\", c_char_p),\n        (\"values\", OptionValue * VALUES_MAX),\n        (\"default_value\", c_char_p),\n    ]\n\n    key: bytes\n    desc: bytes\n    desc_categorized: bytes\n    info: bytes\n    info_categorized: bytes\n    category_key: bytes\n    values: POINTER(OptionValue)\n    default_value: bytes\n</code></pre>"},{"location":"reference/retropy/core/options/v2/#retropy.core.options.v2.OptionIntl","title":"<code>OptionIntl</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_core_options_v2_intl</p> Source code in <code>src/retropy/core/options/v2.py</code> <pre><code>class OptionIntl(Structure):\n    \"\"\"retro_core_options_v2_intl\"\"\"\n\n    _fields_ = [\n        (\"us\", POINTER(CoreOptions)),\n        (\"local\", POINTER(CoreOptions)),\n    ]\n\n    us: POINTER(CoreOptions)\n    local: POINTER(CoreOptions)\n</code></pre>"},{"location":"reference/retropy/core/os/","title":"os","text":""},{"location":"reference/retropy/core/os/localization/","title":"localization","text":""},{"location":"reference/retropy/core/os/localization/#retropy.core.os.localization.Language","title":"<code>Language</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_language</p> Source code in <code>src/retropy/core/os/localization.py</code> <pre><code>class Language(Enum):\n    \"\"\"retro_language\"\"\"\n\n    ENGLISH = 0\n    JAPANESE = 1\n    FRENCH = 2\n    SPANISH = 3\n    GERMAN = 4\n    ITALIAN = 5\n    DUTCH = 6\n    PORTUGUESE_BRAZIL = 7\n    PORTUGUESE_PORTUGAL = 8\n    RUSSIAN = 9\n    KOREAN = 10\n    CHINESE_TRADITIONAL = 11\n    CHINESE_SIMPLIFIED = 12\n    ESPERANTO = 13\n    POLISH = 14\n    VIETNAMESE = 15\n    ARABIC = 16\n    GREEK = 17\n    TURKISH = 18\n    SLOVAK = 19\n    PERSIAN = 20\n    HEBREW = 21\n    ASTURIAN = 22\n    FINNISH = 23\n    INDONESIAN = 24\n    SWEDISH = 25\n    UKRAINIAN = 26\n    CZECH = 27\n    CATALAN_VALENCIA = 28\n    CATALAN = 29\n    BRITISH_ENGLISH = 30\n    HUNGARIAN = 31\n    BELARUSIAN = 32\n</code></pre>"},{"location":"reference/retropy/core/os/localization/#retropy.core.os.localization.Region","title":"<code>Region</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RETRO_REGION_</p> Source code in <code>src/retropy/core/os/localization.py</code> <pre><code>class Region(Enum):\n    \"\"\"RETRO_REGION_\"\"\"\n\n    NTSC = 0\n    PAL = 1\n</code></pre>"},{"location":"reference/retropy/core/os/power/","title":"power","text":""},{"location":"reference/retropy/core/os/power/#retropy.core.os.power.DevicePower","title":"<code>DevicePower</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_device_power</p> Source code in <code>src/retropy/core/os/power.py</code> <pre><code>class DevicePower(Structure):\n    \"\"\"retro_device_power\"\"\"\n\n    _fields_ = [\n        (\"state\", c_int32),\n        (\"seconds\", c_int32),\n        (\"precent\", c_int8),\n    ]\n\n    state: int\n    seconds: int\n    percent: int\n</code></pre>"},{"location":"reference/retropy/core/os/power/#retropy.core.os.power.PowerState","title":"<code>PowerState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_power_state</p> Source code in <code>src/retropy/core/os/power.py</code> <pre><code>class PowerState(Enum):\n    \"\"\"retro_power_state\"\"\"\n\n    UNKOWN = 0\n    DISCHARGING = 1\n    CHARGING = 2\n    CHARGED = 3\n    PLUGGED_IN = 4\n</code></pre>"},{"location":"reference/retropy/core/os/savestate/","title":"savestate","text":""},{"location":"reference/retropy/core/os/savestate/#retropy.core.os.savestate.SavestateContext","title":"<code>SavestateContext</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_savestate_context</p> Source code in <code>src/retropy/core/os/savestate.py</code> <pre><code>class SavestateContext(Enum):\n    \"\"\"retro_savestate_context\"\"\"\n\n    NORMAL = 0\n    RUNAHEAD_SAME_INSTANCE = 1\n    RUNAHEAD_SAME_BINARY = 2\n    ROLLBACK_NETPLAY = 3\n</code></pre>"},{"location":"reference/retropy/core/os/subsystem/","title":"subsystem","text":""},{"location":"reference/retropy/core/os/subsystem/#retropy.core.os.subsystem.SubsystemInfo","title":"<code>SubsystemInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_subsystem_info</p> Source code in <code>src/retropy/core/os/subsystem.py</code> <pre><code>class SubsystemInfo(Structure):\n    \"\"\"retro_subsystem_info\"\"\"\n\n    _fields_ = [\n        (\"desc\", c_char_p),\n        (\"indent\", c_char_p),\n        (\"roms\", POINTER(SubsystemRomInfo)),\n        (\"num_roms\", c_uint),\n        (\"id\", c_uint),\n    ]\n\n    desc: bytes\n    indent: bytes\n    roms: POINTER(SubsystemRomInfo)\n    num_roms: int\n    id: int\n</code></pre>"},{"location":"reference/retropy/core/os/subsystem/#retropy.core.os.subsystem.SubsystemRomInfo","title":"<code>SubsystemRomInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_subsystem_rom_info</p> Source code in <code>src/retropy/core/os/subsystem.py</code> <pre><code>class SubsystemRomInfo(Structure):\n    \"\"\"retro_subsystem_rom_info\"\"\"\n\n    _fields_ = [\n        (\"desc\", c_char_p),\n        (\"valid_extensions\", c_char_p),\n        (\"need_fullpath\", c_bool),\n        (\"block_extract\", c_bool),\n        (\"required\", c_bool),\n        (\"memory\", POINTER(SubystemMemoryInfo)),\n        (\"num_memory\", c_uint),\n    ]\n\n    desc: bytes\n    valid_extensions: bytes\n    need_fullpath: bool\n    block_extract: bool\n    required: bool\n    memory: POINTER(SubystemMemoryInfo)\n    num_memory: int\n</code></pre>"},{"location":"reference/retropy/core/os/subsystem/#retropy.core.os.subsystem.SubystemMemoryInfo","title":"<code>SubystemMemoryInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_subsystem_memory_info</p> Source code in <code>src/retropy/core/os/subsystem.py</code> <pre><code>class SubystemMemoryInfo(Structure):\n    \"\"\"retro_subsystem_memory_info\"\"\"\n\n    _fields_ = [(\"extension\", c_char_p), (\"type\", c_uint)]\n\n    extension: bytes\n    type: int\n</code></pre>"},{"location":"reference/retropy/core/os/system/","title":"system","text":""},{"location":"reference/retropy/core/os/system/#retropy.core.os.system.SystemAvInfo","title":"<code>SystemAvInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_system_av_info</p> Source code in <code>src/retropy/core/os/system.py</code> <pre><code>class SystemAvInfo(Structure):\n    \"\"\"retro_system_av_info\"\"\"\n\n    _fields_ = [(\"geometry\", GameGeometry), (\"timing\", SystemTiming)]\n\n    geometry: GameGeometry\n    timing: SystemTiming\n</code></pre>"},{"location":"reference/retropy/core/os/system/#retropy.core.os.system.SystemContenInfoOverride","title":"<code>SystemContenInfoOverride</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_system_content_info_override</p> Source code in <code>src/retropy/core/os/system.py</code> <pre><code>class SystemContenInfoOverride(Structure):\n    \"\"\"retro_system_content_info_override\"\"\"\n\n    _fields_ = [\n        (\"extensions\", c_char_p),\n        (\"need_fullpath\", c_bool),\n        (\"persistent_data\", c_bool),\n    ]\n\n    extensions: bytes\n    need_fullpath: bool\n    persistent_data: bool\n</code></pre>"},{"location":"reference/retropy/core/os/system/#retropy.core.os.system.SystemInfo","title":"<code>SystemInfo</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_system_info</p> Source code in <code>src/retropy/core/os/system.py</code> <pre><code>class SystemInfo(Structure):\n    \"\"\"retro_system_info\"\"\"\n\n    _fields_ = [\n        (\"library_name\", c_char_p),\n        (\"library_version\", c_char_p),\n        (\"valid_extensions\", c_char_p),\n        (\"need_fullpath\", c_bool),\n        (\"block_extract\", c_bool),\n    ]\n\n    library_name: bytes\n    library_version: bytes\n    valid_extensions: bytes\n    need_fullpath: bool\n    block_extract: bool\n</code></pre>"},{"location":"reference/retropy/core/os/system/#retropy.core.os.system.SystemTiming","title":"<code>SystemTiming</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_system_timing</p> Source code in <code>src/retropy/core/os/system.py</code> <pre><code>class SystemTiming(Structure):\n    \"\"\"retro_system_timing\"\"\"\n\n    _fields_ = [(\"fps\", c_double), (\"sample_rate\", c_double)]\n\n    fps: float\n    sample_rate: float\n</code></pre>"},{"location":"reference/retropy/core/os/vfs/","title":"vfs","text":""},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_close_t","title":"<code>vfs_close_t = CFUNCTYPE(c_int, POINTER(VfsFileHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_close_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_closedir_t","title":"<code>vfs_closedir_t = CFUNCTYPE(c_int, POINTER(VfsDirHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_closedir_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_dirent_get_name_t","title":"<code>vfs_dirent_get_name_t = CFUNCTYPE(c_char_p, POINTER(VfsDirHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_dirent_get_name_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_dirent_is_dir_t","title":"<code>vfs_dirent_is_dir_t = CFUNCTYPE(c_bool, POINTER(VfsDirHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_dirent_is_dir_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_flush_t","title":"<code>vfs_flush_t = CFUNCTYPE(c_int, POINTER(VfsFileHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_flush_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_get_path_t","title":"<code>vfs_get_path_t = CFUNCTYPE(c_char_p, POINTER(VfsFileHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_get_path_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_mkdir_t","title":"<code>vfs_mkdir_t = CFUNCTYPE(c_int, c_char_p)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_mkdir_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_open_t","title":"<code>vfs_open_t = CFUNCTYPE(POINTER(VfsFileHandle), c_char_p, c_uint, c_uint)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_open_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_opendir_t","title":"<code>vfs_opendir_t = CFUNCTYPE(POINTER(VfsDirHandle), c_char_p, c_bool)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_opendir_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_read_t","title":"<code>vfs_read_t = CFUNCTYPE(c_int64, POINTER(VfsFileHandle), c_void_p, c_uint64)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_read_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_readdir_t","title":"<code>vfs_readdir_t = CFUNCTYPE(c_bool, POINTER(VfsDirHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_readdir_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_remove_t","title":"<code>vfs_remove_t = CFUNCTYPE(c_int, c_void_p)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_remove_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_rename_t","title":"<code>vfs_rename_t = CFUNCTYPE(c_int, c_char_p, c_char_p)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_rename_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_seek_t","title":"<code>vfs_seek_t = CFUNCTYPE(c_int64, POINTER(VfsFileHandle), c_int64, c_int)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_seek_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_size_t","title":"<code>vfs_size_t = CFUNCTYPE(c_int64, POINTER(VfsFileHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_size_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_stat_t","title":"<code>vfs_stat_t = CFUNCTYPE(c_int, c_char_p, POINTER(c_int32))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_stat_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_tell_t","title":"<code>vfs_tell_t = CFUNCTYPE(c_int64, POINTER(VfsFileHandle))</code>  <code>module-attribute</code>","text":"<p>retro_vfs_tell_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_truncate_t","title":"<code>vfs_truncate_t = CFUNCTYPE(c_int64, POINTER(VfsFileHandle), c_int64)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_truncate_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.vfs_write_t","title":"<code>vfs_write_t = CFUNCTYPE(c_int64, POINTER(VfsFileHandle), c_void_p, c_uint64)</code>  <code>module-attribute</code>","text":"<p>retro_vfs_write_t</p>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.AccessHint","title":"<code>AccessHint</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RETRO_VFS_FILE_ACCESS_HINT_</p> Source code in <code>src/retropy/core/os/vfs.py</code> <pre><code>class AccessHint(Enum):\n    \"\"\"RETRO_VFS_FILE_ACCESS_HINT_\"\"\"\n\n    NONE = 0\n    FREQUENT_ACCESS = 1 &lt;&lt; 0\n</code></pre>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.FileAccess","title":"<code>FileAccess</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>RETRO_VFS_FILE_ACCESS_</p> Source code in <code>src/retropy/core/os/vfs.py</code> <pre><code>class FileAccess(IntFlag):\n    \"\"\"RETRO_VFS_FILE_ACCESS_\"\"\"\n\n    READ = 1 &lt;&lt; 0\n    WRITE = 1 &lt;&lt; 1\n    UPDATE = 1 &lt;&lt; 2\n</code></pre>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.SeekPosition","title":"<code>SeekPosition</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RETRO_VFS_SEEK_POSITION_</p> Source code in <code>src/retropy/core/os/vfs.py</code> <pre><code>class SeekPosition(Enum):\n    \"\"\"RETRO_VFS_SEEK_POSITION_\"\"\"\n\n    START = 0\n    CURRENT = 1\n    END = 2\n</code></pre>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.StatResult","title":"<code>StatResult</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>RETRO_VFS_STAT_IS_</p> Source code in <code>src/retropy/core/os/vfs.py</code> <pre><code>class StatResult(IntFlag):\n    \"\"\"RETRO_VFS_STAT_IS_\"\"\"\n\n    VALID = 1 &lt;&lt; 0\n    DIRECTORY = 1 &lt;&lt; 1\n    CHARACTER_SPECIAL = 1 &lt;&lt; 2\n</code></pre>"},{"location":"reference/retropy/core/os/vfs/#retropy.core.os.vfs.VfsInterface","title":"<code>VfsInterface</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_vfs_interface</p> Source code in <code>src/retropy/core/os/vfs.py</code> <pre><code>class VfsInterface(Structure):\n    \"\"\"retro_vfs_interface\"\"\"\n\n    _fields_ = [\n        (\"get_path\", vfs_get_path_t),\n        (\"open\", vfs_open_t),\n        (\"close\", vfs_close_t),\n        (\"size\", vfs_size_t),\n        (\"tell\", vfs_tell_t),\n        (\"seek\", vfs_seek_t),\n        (\"read\", vfs_read_t),\n        (\"write\", vfs_write_t),\n        (\"flush\", vfs_flush_t),\n        (\"remove\", vfs_remove_t),\n        (\"rename\", vfs_rename_t),\n        (\"truncate\", vfs_truncate_t),\n        (\"stat\", vfs_stat_t),\n        (\"mkdir\", vfs_mkdir_t),\n        (\"opendir\", vfs_opendir_t),\n        (\"readdir\", vfs_readdir_t),\n        (\"dirent_get_name\", vfs_dirent_get_name_t),\n        (\"dirent_is_dir\", vfs_dirent_is_dir_t),\n        (\"closedir\", vfs_closedir_t),\n    ]\n\n    get_path: Callable\n    open: Callable\n    close: Callable\n    size: Callable\n    tell: Callable\n    seek: Callable\n    read: Callable\n    write: Callable\n    flush: Callable\n    remove: Callable\n    rename: Callable\n    # API v2\n    truncate: Callable\n    # API v3\n    stat: Callable\n    mkdir: Callable\n    opendir: Callable\n    readdir: Callable\n    dirent_get_name: Callable\n    dirent_is_dir: Callable\n    closedir: Callable\n</code></pre>"},{"location":"reference/retropy/core/performance/","title":"performance","text":""},{"location":"reference/retropy/core/performance/fastforward/","title":"fastforward","text":""},{"location":"reference/retropy/core/performance/fastforward/#retropy.core.performance.fastforward.FastforwardingOverride","title":"<code>FastforwardingOverride</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_fastforwarding_override</p> Source code in <code>src/retropy/core/performance/fastforward.py</code> <pre><code>class FastforwardingOverride(Structure):\n    \"\"\"retro_fastforwarding_override\"\"\"\n\n    _fields_ = [\n        (\"ratio\", c_float),\n        (\"fastforward\", c_bool),\n        (\"notification\", c_bool),\n        (\"inhibit_toggle\", c_bool),\n    ]\n\n    ratio: float\n    fastforward: bool\n    notification: bool\n    inhibit_toggle: bool\n</code></pre>"},{"location":"reference/retropy/core/performance/frametime/","title":"frametime","text":""},{"location":"reference/retropy/core/performance/frametime/#retropy.core.performance.frametime.FrameTimeCallback","title":"<code>FrameTimeCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_frame_time_callback</p> Source code in <code>src/retropy/core/performance/frametime.py</code> <pre><code>class FrameTimeCallback(Structure):\n    \"\"\"retro_frame_time_callback\"\"\"\n\n    _fields_ = [\n        (\"callback\", retro_frame_time_callback_t),\n        (\"reference\", c_int64),\n    ]\n\n    callback: Callable[[int], None]\n    reference: int\n</code></pre>"},{"location":"reference/retropy/core/performance/perf/","title":"perf","text":""},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.get_cpu_features_t","title":"<code>get_cpu_features_t = CFUNCTYPE(c_uint64)</code>  <code>module-attribute</code>","text":"<p>retro_get_cpu_features_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.perf_get_counter_t","title":"<code>perf_get_counter_t = CFUNCTYPE(c_uint64)</code>  <code>module-attribute</code>","text":"<p>\"retro_perf_get_counter_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.perf_get_time_usec_t","title":"<code>perf_get_time_usec_t = CFUNCTYPE(c_int64)</code>  <code>module-attribute</code>","text":"<p>retro_perf_get_time_usec_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.perf_log_t","title":"<code>perf_log_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_perf_log_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.perf_register_t","title":"<code>perf_register_t = CFUNCTYPE(None, POINTER(PerfCounter))</code>  <code>module-attribute</code>","text":"<p>retro_perf_register_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.perf_start_t","title":"<code>perf_start_t = CFUNCTYPE(None, POINTER(PerfCounter))</code>  <code>module-attribute</code>","text":"<p>retro_perf_start_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.perf_stop_t","title":"<code>perf_stop_t = CFUNCTYPE(None, POINTER(PerfCounter))</code>  <code>module-attribute</code>","text":"<p>retro_perf_stop_t</p>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.PerfCallback","title":"<code>PerfCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_perf_callback</p> Source code in <code>src/retropy/core/performance/perf.py</code> <pre><code>class PerfCallback(Structure):\n    \"\"\"retro_perf_callback\"\"\"\n\n    _fields_ = [\n        (\"get_time_usec\", perf_get_time_usec_t),\n        (\"get_cpu_features\", get_cpu_features_t),\n        (\"get_perf_counter\", perf_get_counter_t),\n        (\"perf_register\", perf_register_t),\n        (\"perf_start\", perf_start_t),\n        (\"perf_stop\", perf_stop_t),\n        (\"perf_log\", perf_log_t),\n    ]\n\n    get_time_usec: Callable[[None], int]\n    get_cpu_features: Callable[[None], int]\n    get_perf_counter: Callable[[None], int]\n    perf_register: Callable[[None], None]\n    perf_start: Callable[[POINTER(PerfCounter)], None]\n    perf_stop: Callable[[POINTER(PerfCounter)], None]\n    perf_log: Callable[[POINTER(PerfCounter)], None]\n</code></pre>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.PerfCounter","title":"<code>PerfCounter</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_perf_counter</p> Source code in <code>src/retropy/core/performance/perf.py</code> <pre><code>class PerfCounter(Structure):\n    \"\"\"retro_perf_counter\"\"\"\n\n    _fields_ = [\n        (\"indent\", c_char_p),\n        (\"start\", c_uint64),\n        (\"total\", c_uint64),\n        (\"call_cnt\", c_uint64),\n        (\"registered\", c_bool),\n    ]\n\n    indent: bytes\n    start: int\n    total: int\n    call_cnt: int\n    registered: bool\n</code></pre>"},{"location":"reference/retropy/core/performance/perf/#retropy.core.performance.perf.SIMD","title":"<code>SIMD</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>RETRO_SIMD_</p> Source code in <code>src/retropy/core/performance/perf.py</code> <pre><code>class SIMD(IntFlag):\n    \"\"\"RETRO_SIMD_\"\"\"\n\n    SSE = 1 &lt;&lt; 0\n    SSE2 = 1 &lt;&lt; 1\n    VMX = 1 &lt;&lt; 2\n    VMX128 = 1 &lt;&lt; 3\n    AVX = 1 &lt;&lt; 4\n    NEON = 1 &lt;&lt; 5\n    SSE3 = 1 &lt;&lt; 6\n    SSSE3 = 1 &lt;&lt; 7\n    MMX = 1 &lt;&lt; 8\n    MMXEXT = 1 &lt;&lt; 9\n    SSE4 = 1 &lt;&lt; 10\n    SSE42 = 1 &lt;&lt; 11\n    AVX2 = 1 &lt;&lt; 12\n    VFPU = 1 &lt;&lt; 13\n    PS = 1 &lt;&lt; 14\n    AES = 1 &lt;&lt; 15\n    VFPV3 = 1 &lt;&lt; 16\n    VFPV4 = 1 &lt;&lt; 17\n    POPCNT = 1 &lt;&lt; 18\n    MOVBE = 1 &lt;&lt; 19\n    CMOV = 1 &lt;&lt; 20\n    ASIMD = 1 &lt;&lt; 21\n</code></pre>"},{"location":"reference/retropy/core/performance/throttle/","title":"throttle","text":""},{"location":"reference/retropy/core/performance/throttle/#retropy.core.performance.throttle.ThrottleMode","title":"<code>ThrottleMode</code>","text":"<p>             Bases: <code>Enum</code></p> <p>RETRO_THROTTLE_</p> Source code in <code>src/retropy/core/performance/throttle.py</code> <pre><code>class ThrottleMode(Enum):\n    \"\"\"RETRO_THROTTLE_\"\"\"\n\n    NONE = 0\n    FRAME_STEPPING = 1\n    FAST_FORWARD = 2\n    SLOW_MOTION = 3\n    REWINDING = 4\n    VSYNC = 5\n    UNBLOCKED = 6\n</code></pre>"},{"location":"reference/retropy/core/performance/throttle/#retropy.core.performance.throttle.ThrottleState","title":"<code>ThrottleState</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_throttle_state</p> Source code in <code>src/retropy/core/performance/throttle.py</code> <pre><code>class ThrottleState(Structure):\n    \"\"\"retro_throttle_state\"\"\"\n\n    _fields_ = [\n        (\"mode\", c_uint),\n        (\"rate\", c_float),\n    ]\n\n    mode: int\n    rate: float\n</code></pre>"},{"location":"reference/retropy/core/renderer/","title":"renderer","text":""},{"location":"reference/retropy/core/renderer/framebuffer/","title":"framebuffer","text":""},{"location":"reference/retropy/core/renderer/framebuffer/#retropy.core.renderer.framebuffer.Framebuffer","title":"<code>Framebuffer</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_framebuffer</p> Source code in <code>src/retropy/core/renderer/framebuffer.py</code> <pre><code>class Framebuffer(Structure):\n    \"\"\"retro_framebuffer\"\"\"\n\n    _fields_ = [\n        (\"data\", c_void_p),\n        (\"width\", c_uint),\n        (\"height\", c_uint),\n        (\"pitch\", c_size_t),\n        (\"fromat\", c_int32),\n        (\"access_flags\", c_uint),\n        (\"memory_flags\", c_uint),\n    ]\n\n    data: c_void_p\n    width: int\n    height: int\n    pitch: int\n    fromat: int\n    access_flags: int\n    memory_flags: int\n</code></pre>"},{"location":"reference/retropy/core/renderer/framebuffer/#retropy.core.renderer.framebuffer.MEMORY_ACCESS","title":"<code>MEMORY_ACCESS</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>RETRO_MEMORY_</p> Source code in <code>src/retropy/core/renderer/framebuffer.py</code> <pre><code>class MEMORY_ACCESS(IntFlag):\n    \"\"\"RETRO_MEMORY_\"\"\"\n\n    WRITE = 1 &lt;&lt; 0\n    READ = 1 &lt;&lt; 1\n</code></pre>"},{"location":"reference/retropy/core/renderer/framebuffer/#retropy.core.renderer.framebuffer.MEMORY_TYPE","title":"<code>MEMORY_TYPE</code>","text":"<p>             Bases: <code>IntFlag</code></p> <p>RETRO_MEMORY_TYPE_</p> Source code in <code>src/retropy/core/renderer/framebuffer.py</code> <pre><code>class MEMORY_TYPE(IntFlag):\n    \"\"\"RETRO_MEMORY_TYPE_\"\"\"\n\n    MEMORY_TYPE = 1 &lt;&lt; 0\n</code></pre>"},{"location":"reference/retropy/core/renderer/framebuffer/#retropy.core.renderer.framebuffer.PixelFormat","title":"<code>PixelFormat</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_pixel_format</p> Source code in <code>src/retropy/core/renderer/framebuffer.py</code> <pre><code>class PixelFormat(Enum):\n    \"\"\"retro_pixel_format\"\"\"\n\n    RGB1555 = 0\n    XRGB8888 = 1\n    RGB565 = 2\n</code></pre>"},{"location":"reference/retropy/core/renderer/hw/","title":"hw","text":""},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.hw_context_reset_t","title":"<code>hw_context_reset_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_hw_context_reset_t</p>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.hw_get_current_framebuffer_t","title":"<code>hw_get_current_framebuffer_t = CFUNCTYPE(c_ulonglong)</code>  <code>module-attribute</code>","text":"<p>retro_hw_get_current_framebuffer_t</p>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.hw_get_proc_address_t","title":"<code>hw_get_proc_address_t = CFUNCTYPE(proc_address_t, c_char_p)</code>  <code>module-attribute</code>","text":"<p>retro_hw_get_proc_address_t</p>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.proc_address_t","title":"<code>proc_address_t = CFUNCTYPE(None)</code>  <code>module-attribute</code>","text":"<p>retro_proc_address_t</p>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.HWRenderCallback","title":"<code>HWRenderCallback</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_hw_render_callback</p> Source code in <code>src/retropy/core/renderer/hw.py</code> <pre><code>class HWRenderCallback(Structure):\n    \"\"\"retro_hw_render_callback\"\"\"\n\n    _fields_ = [\n        (\"context_type\", c_int32),\n        (\"context_reset\", hw_context_reset_t),\n        (\"get_current_framebuffer\", hw_get_current_framebuffer_t),\n        (\"get_proc_address\", hw_get_proc_address_t),\n        (\"depth\", c_bool),\n        (\"stencil\", c_bool),\n        (\"bottom_left_origin\", c_bool),\n        (\"version_major\", c_uint),\n        (\"version_minor\", c_uint),\n        (\"cache_context\", c_bool),\n        (\"context_destroy\", hw_context_reset_t),\n        (\"debug_context\", c_bool),\n    ]\n\n    context_type: int\n    context_reset: Callable[[None], None]\n    get_current_framebuffer: Callable[[None], int]\n    get_proc_address: Callable[[bytes], Callable[[None], None]]\n    depth: bool\n    stencil: bool\n    bottom_left_origin: bool\n    version_major: int\n    version_minor: int\n    cache_context: bool\n    context_destroy: Callable[[None], None]\n    debug_context: bool\n</code></pre>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.HWRenderInterface","title":"<code>HWRenderInterface</code>","text":"<p>             Bases: <code>Structure</code></p> <p>retro_hw_render_interface</p> Source code in <code>src/retropy/core/renderer/hw.py</code> <pre><code>class HWRenderInterface(Structure):\n    \"\"\"retro_hw_render_interface\"\"\"\n\n    _fields_ = [(\"interface_type\", c_int32), (\"interface_version\", c_uint)]\n\n    interface_type: c_int32\n    interface_version: c_uint\n</code></pre>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.HWRenderInterfaceType","title":"<code>HWRenderInterfaceType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_hw_render_interface_type</p> Source code in <code>src/retropy/core/renderer/hw.py</code> <pre><code>class HWRenderInterfaceType(Enum):\n    \"\"\"retro_hw_render_interface_type\"\"\"\n\n    VULKAN = 0\n    D3D9 = 1\n    D3D10 = 2\n    D3D11 = 3\n    D3D12 = 4\n    GSKIT_PS2 = 5\n</code></pre>"},{"location":"reference/retropy/core/renderer/hw/#retropy.core.renderer.hw.HwContextType","title":"<code>HwContextType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>retro_hw_context_type</p> Source code in <code>src/retropy/core/renderer/hw.py</code> <pre><code>class HwContextType(Enum):\n    \"\"\"retro_hw_context_type\"\"\"\n\n    NONE = 0\n    OPENGL = 1\n    OPENGLES2 = 2\n    OPENGL_CORE = 3\n    OPENGLES3 = 4\n    OPENGLES_VERSION = 5\n    VULKAN = 6\n    D3D11 = 7\n    D3D10 = 8\n    D3D12 = 9\n    D3D9 = 10\n</code></pre>"},{"location":"reference/retropy/frontends/","title":"frontends","text":"<p>Module contains ready-to-use frontends.</p>"},{"location":"reference/retropy/frontends/pygame/","title":"pygame","text":""},{"location":"reference/retropy/frontends/pyglet/","title":"pyglet","text":""},{"location":"reference/retropy/frontends/gym/","title":"gym","text":""},{"location":"reference/retropy/frontends/gym/gym/","title":"gym","text":""},{"location":"reference/retropy/frontends/gym/wrapper/","title":"wrapper","text":""},{"location":"reference/retropy/frontends/gym/wrapper/#retropy.frontends.gym.wrapper.DiscreteInputs","title":"<code>DiscreteInputs</code>","text":"<p>             Bases: <code>ActionWrapper</code></p> <p>Map discrete actions into controller inputs.</p> Example <p>env = RetroGym(core, rom) action_map = [[\"A\"], [\"B\"], [\"LEFT\"], [\"RIGHT\", \"A\"], [\"LEFT_X\"]] env = DiscreteInputs(env, action_map) print(env.action_space) # -&gt; Discrete(5)</p> Source code in <code>src/retropy/frontends/gym/wrapper.py</code> <pre><code>class DiscreteInputs(ActionWrapper):\n    \"\"\"\n    Map discrete actions into controller inputs.\n\n    Example:\n        &gt;&gt;&gt; env = RetroGym(core, rom)\n        &gt;&gt;&gt; action_map = [[\"A\"], [\"B\"], [\"LEFT\"], [\"RIGHT\", \"A\"], [\"LEFT_X\"]]\n        &gt;&gt;&gt; env = DiscreteInputs(env, action_map)\n        &gt;&gt;&gt; print(env.action_space) # -&gt; Discrete(5)\n    \"\"\"\n\n    def __init__(self, env: RetroGym, map: list[list[str]]):\n        super().__init__(env)\n        self.map = map\n        self.action_space = spaces.Discrete(len(self.map))\n\n    def action(self, action: int):\n        inputs = self.map[action]\n\n        action = [0] * len(GamePadInput)\n        for i, input in enumerate(GamePadInput):\n            if input in inputs:\n                action[i] = 1\n\n        print(action)\n\n        return action\n</code></pre>"},{"location":"reference/retropy/utils/","title":"utils","text":"<p>Module contains helper and abstractions to make experience simpler and more pythonic.</p>"},{"location":"reference/retropy/utils/cheats/","title":"cheats","text":""},{"location":"reference/retropy/utils/cheats/#retropy.utils.cheats.CheatManager","title":"<code>CheatManager</code>","text":"<p>Manages cheat code in accordance with the capabilities provided by libretro's cheat API.</p> <p>Upon inspection of common cores implementations, some don't fully utilize the parameters given to the <code>retro_cheat_set</code> function i.e. ignore <code>index</code> and <code>enabled</code>. Therefore, to provide the most universal solution, all added cheats are always enabled and removing a cheat resets all cheats and re-adds the remaining.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cheats = CheatManager(retro_cheat_set, retro_cheat_reset)\n&gt;&gt;&gt; cheats['name'] = b'code'\n&gt;&gt;&gt; cheats.pop('name')\n</code></pre> Source code in <code>src/retropy/utils/cheats.py</code> <pre><code>class CheatManager:\n    \"\"\"\n    Manages cheat code in accordance with the capabilities provided by libretro's cheat API.\n\n    Upon inspection of common cores implementations, some don't fully utilize the parameters given to the `retro_cheat_set` function i.e. ignore `index` and `enabled`. Therefore, to provide the most universal solution, all added cheats are always enabled and removing a cheat resets all cheats and re-adds the remaining.\n\n    Examples:\n        &gt;&gt;&gt; cheats = CheatManager(retro_cheat_set, retro_cheat_reset)\n        &gt;&gt;&gt; cheats['name'] = b'code'\n        &gt;&gt;&gt; cheats.pop('name')\n    \"\"\"\n\n    store: dict[str, bytes]\n    __index: int\n    __update_cheat: Callable[[int, bool, bytes], None]\n    __reset_cheats: Callable[[None], None]\n\n    def __init__(self, update: Callable, reset: Callable) -&gt; None:\n        self.__update_cheat = update\n        self.__reset_cheats = reset\n        self._clear()\n\n    def _clear(self):\n        \"\"\"Clears cheats after no longer needed.\"\"\"\n        self.store = {}\n        self.__index = 0\n        self.__reset_cheats()\n\n    def __getitem__(self, name: str) -&gt; bytes:\n        \"\"\"Return code of cheat by name.\n\n        Args:\n            name (str): Cheat name\n\n        Returns:\n            bytes: Cheat code\n        \"\"\"\n        return self.store[name]\n\n    def __setitem__(self, name: str, code: bytes):\n        \"\"\"Adds a new cheat to the core.\n\n        Args:\n            name (str): Cheat name. Acts as key.\n            code (bytes): Cheat code.\n\n        Raises:\n            TypeError: 'code' is not bytes.\n            KeyError: 'name' already exists.\n        \"\"\"\n\n        # Check type since object is used with ctypes\n        if not isinstance(code, bytes):\n            return TypeError(\"'code' must be a bytes object\")\n\n        if self.store.get(name, None):\n            raise KeyError(f\"Cheat name '{name}' already exists.\")\n\n        self.store[name] = code\n        self.__add_cheat(code)\n\n    def __iter__(self) -&gt; Iterator[tuple[str, bytes]]:\n        \"\"\"Iterate over all cheat codes.\n\n        Returns:\n            list[tuple[str, bytes]]: Iterator over all cheat codes.\n        \"\"\"\n        return iter(self.store.items())\n\n    def __repr__(self) -&gt; str:\n        return str(self.store)\n\n    def __add_cheat(self, code: bytes):\n        self.__index += 1\n        self.__update_cheat(self.__index, True, code)\n\n    def pop(self, name: str) -&gt; bytes:\n        \"\"\"Remove cheat code.\n\n        Args:\n            name (str): Cheat name.\n\n        Returns:\n            bytes: Cheat code.\n        \"\"\"\n        self.__reset_cheats()\n        code = self.store.pop(name)\n\n        self.__reset_cheats()\n        self.__index = 0\n        for code in self.store.values():\n            self.__add_cheat(code)\n\n        return code\n</code></pre>"},{"location":"reference/retropy/utils/cheats/#retropy.utils.cheats.CheatManager.__getitem__","title":"<code>__getitem__(name)</code>","text":"<p>Return code of cheat by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cheat name</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Cheat code</p> Source code in <code>src/retropy/utils/cheats.py</code> <pre><code>def __getitem__(self, name: str) -&gt; bytes:\n    \"\"\"Return code of cheat by name.\n\n    Args:\n        name (str): Cheat name\n\n    Returns:\n        bytes: Cheat code\n    \"\"\"\n    return self.store[name]\n</code></pre>"},{"location":"reference/retropy/utils/cheats/#retropy.utils.cheats.CheatManager.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over all cheat codes.</p> <p>Returns:</p> Type Description <code>Iterator[tuple[str, bytes]]</code> <p>list[tuple[str, bytes]]: Iterator over all cheat codes.</p> Source code in <code>src/retropy/utils/cheats.py</code> <pre><code>def __iter__(self) -&gt; Iterator[tuple[str, bytes]]:\n    \"\"\"Iterate over all cheat codes.\n\n    Returns:\n        list[tuple[str, bytes]]: Iterator over all cheat codes.\n    \"\"\"\n    return iter(self.store.items())\n</code></pre>"},{"location":"reference/retropy/utils/cheats/#retropy.utils.cheats.CheatManager.__setitem__","title":"<code>__setitem__(name, code)</code>","text":"<p>Adds a new cheat to the core.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cheat name. Acts as key.</p> required <code>code</code> <code>bytes</code> <p>Cheat code.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>'code' is not bytes.</p> <code>KeyError</code> <p>'name' already exists.</p> Source code in <code>src/retropy/utils/cheats.py</code> <pre><code>def __setitem__(self, name: str, code: bytes):\n    \"\"\"Adds a new cheat to the core.\n\n    Args:\n        name (str): Cheat name. Acts as key.\n        code (bytes): Cheat code.\n\n    Raises:\n        TypeError: 'code' is not bytes.\n        KeyError: 'name' already exists.\n    \"\"\"\n\n    # Check type since object is used with ctypes\n    if not isinstance(code, bytes):\n        return TypeError(\"'code' must be a bytes object\")\n\n    if self.store.get(name, None):\n        raise KeyError(f\"Cheat name '{name}' already exists.\")\n\n    self.store[name] = code\n    self.__add_cheat(code)\n</code></pre>"},{"location":"reference/retropy/utils/cheats/#retropy.utils.cheats.CheatManager.pop","title":"<code>pop(name)</code>","text":"<p>Remove cheat code.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cheat name.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Cheat code.</p> Source code in <code>src/retropy/utils/cheats.py</code> <pre><code>def pop(self, name: str) -&gt; bytes:\n    \"\"\"Remove cheat code.\n\n    Args:\n        name (str): Cheat name.\n\n    Returns:\n        bytes: Cheat code.\n    \"\"\"\n    self.__reset_cheats()\n    code = self.store.pop(name)\n\n    self.__reset_cheats()\n    self.__index = 0\n    for code in self.store.values():\n        self.__add_cheat(code)\n\n    return code\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/","title":"exceptions","text":""},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.FeatureNotAvailable","title":"<code>FeatureNotAvailable</code>","text":"<p>             Bases: <code>ModuleNotFoundError</code></p> <p>A requested feature is not currently available.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class FeatureNotAvailable(ModuleNotFoundError):\n    \"\"\"A requested feature is not currently available.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.GameAlreadyLoaded","title":"<code>GameAlreadyLoaded</code>","text":"<p>             Bases: <code>RuntimeError</code></p> <p>Two games cannot be loaded at once.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class GameAlreadyLoaded(RuntimeError):\n    \"\"\"Two games cannot be loaded at once.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.GameCannotBeLoaded","title":"<code>GameCannotBeLoaded</code>","text":"<p>             Bases: <code>RuntimeError</code></p> <p>Core rejects provided game file.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class GameCannotBeLoaded(RuntimeError):\n    \"\"\"Core rejects provided game file.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.InvalidRomError","title":"<code>InvalidRomError</code>","text":"<p>             Bases: <code>OSError</code></p> <p>Core rejects provided game file.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class InvalidRomError(OSError):\n    \"\"\"Core rejects provided game file.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.NoGameLoaded","title":"<code>NoGameLoaded</code>","text":"<p>             Bases: <code>RuntimeError</code></p> <p>An action is called which requires a loaded game.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class NoGameLoaded(RuntimeError):\n    \"\"\"An action is called which requires a loaded game.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.SavestateError","title":"<code>SavestateError</code>","text":"<p>             Bases: <code>RuntimeError</code></p> <p>Savestate could not be handled.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class SavestateError(RuntimeError):\n    \"\"\"Savestate could not be handled.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/exceptions/#retropy.utils.exceptions.UnknownEnvironmentCommand","title":"<code>UnknownEnvironmentCommand</code>","text":"<p>             Bases: <code>RuntimeError</code></p> <p>Environment command used by core is not recognized.</p> Source code in <code>src/retropy/utils/exceptions.py</code> <pre><code>class UnknownEnvironmentCommand(RuntimeError):\n    \"\"\"Environment command used by core is not recognized.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/retropy/utils/memory/","title":"memory","text":""},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.InternalMemory","title":"<code>InternalMemory</code>","text":"<p>Readonly internal memory of emulator. Supports common list indexing patterns.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mem = InternalMemory(ptr, 10)\n&gt;&gt;&gt; print(mem[0])\n&gt;&gt;&gt; print(mem[-1])\n&gt;&gt;&gt; print(mem[2:7])\n&gt;&gt;&gt; print(mem[8:])\n</code></pre> Source code in <code>src/retropy/utils/memory.py</code> <pre><code>class InternalMemory:\n    \"\"\"\n    Readonly internal memory of emulator. Supports common list indexing patterns.\n\n    Examples:\n        &gt;&gt;&gt; mem = InternalMemory(ptr, 10)\n        &gt;&gt;&gt; print(mem[0])\n        &gt;&gt;&gt; print(mem[-1])\n        &gt;&gt;&gt; print(mem[2:7])\n        &gt;&gt;&gt; print(mem[8:])\n    \"\"\"\n\n    def __init__(self, ptr: POINTER(c_ubyte), length: int):\n        self.__ptr = ptr\n        self.__length = length\n\n    def __len__(self):\n        return self.__length\n\n    def __getitem__(self, index: int | slice) -&gt; int | list[int]:\n        \"\"\"Reads emulator memory\n\n        Args:\n            index (int | slice): Memory address\n\n        Raises:\n            IndexError: Index is out of range\n            TypeError: Index has unsupported type\n\n        Returns:\n            int: requested byte(s)\n        \"\"\"\n        if isinstance(index, int):\n            # Handle negative values\n            if index &lt; 0:\n                index += self.__length\n\n            # Check bounds\n            if index &lt; 0 or index &gt;= self.__length:\n                raise IndexError(\n                    f\"The index ({index}) is out of range for array of length {self.__length}.\"\n                )\n        elif isinstance(index, slice):\n            # Handle negative/None values\n            start = index.start or 0\n            stop = index.stop or self.__length - 1\n            step = index.step or 1\n\n            start = start + self.__length if start &lt; 0 else start\n            stop = stop + self.__length if stop &lt; 0 else stop\n            step = abs(step)\n\n            index = slice(start, stop, step)\n\n            # Check bounds\n            if (\n                (index.start &lt; 0 or index.start &gt;= self.__length)\n                or (index.stop &gt;= self.__length or index.stop &lt; index.start)\n                or (index.step &gt;= self.__length)\n            ):\n                raise IndexError(\n                    f\"The index ({index}) is out of range for array of length {self.__length}.\"\n                )\n        else:\n            raise TypeError(f\"Invalid index type: {type(index)}.\")\n\n        return self.__ptr[index]\n</code></pre>"},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.InternalMemory.__getitem__","title":"<code>__getitem__(index)</code>","text":"<p>Reads emulator memory</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | slice</code> <p>Memory address</p> required <p>Raises:</p> Type Description <code>IndexError</code> <p>Index is out of range</p> <code>TypeError</code> <p>Index has unsupported type</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int | list[int]</code> <p>requested byte(s)</p> Source code in <code>src/retropy/utils/memory.py</code> <pre><code>def __getitem__(self, index: int | slice) -&gt; int | list[int]:\n    \"\"\"Reads emulator memory\n\n    Args:\n        index (int | slice): Memory address\n\n    Raises:\n        IndexError: Index is out of range\n        TypeError: Index has unsupported type\n\n    Returns:\n        int: requested byte(s)\n    \"\"\"\n    if isinstance(index, int):\n        # Handle negative values\n        if index &lt; 0:\n            index += self.__length\n\n        # Check bounds\n        if index &lt; 0 or index &gt;= self.__length:\n            raise IndexError(\n                f\"The index ({index}) is out of range for array of length {self.__length}.\"\n            )\n    elif isinstance(index, slice):\n        # Handle negative/None values\n        start = index.start or 0\n        stop = index.stop or self.__length - 1\n        step = index.step or 1\n\n        start = start + self.__length if start &lt; 0 else start\n        stop = stop + self.__length if stop &lt; 0 else stop\n        step = abs(step)\n\n        index = slice(start, stop, step)\n\n        # Check bounds\n        if (\n            (index.start &lt; 0 or index.start &gt;= self.__length)\n            or (index.stop &gt;= self.__length or index.stop &lt; index.start)\n            or (index.step &gt;= self.__length)\n        ):\n            raise IndexError(\n                f\"The index ({index}) is out of range for array of length {self.__length}.\"\n            )\n    else:\n        raise TypeError(f\"Invalid index type: {type(index)}.\")\n\n    return self.__ptr[index]\n</code></pre>"},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.RAM","title":"<code>RAM</code>","text":"<p>Holds different memory types of emulator.</p> Source code in <code>src/retropy/utils/memory.py</code> <pre><code>class RAM:\n    \"\"\"Holds different memory types of emulator.\"\"\"\n\n    save: InternalMemory\n    \"\"\"Save RAM for persistent game data. Usually found on a game cartridge, backed up by a battery.\"\"\"\n\n    rtc: InternalMemory\n    \"\"\"Some games have a built-in clock to keep track of time.\"\"\"\n\n    system: InternalMemory\n    \"\"\"Game system's main RAM for actively used game data like characters, levels, and logic.\"\"\"\n\n    video: InternalMemory\n    \"\"\"Video RAM (VRAM) for displaying sprites, textures, and other graphics data.\"\"\"\n\n    def __init__(self) -&gt; None:\n        self._clear()\n\n    def _clear(self):\n        \"\"\"Cleans memory pointer objects. Needs to be done after game unload.\"\"\"\n        self.save = None\n        self.rtc = None\n        self.system = None\n        self.video = None\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.save}, {self.rtc}, {self.system}, {self.video}\"\n</code></pre>"},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.RAM.rtc","title":"<code>rtc: InternalMemory</code>  <code>instance-attribute</code>","text":"<p>Some games have a built-in clock to keep track of time.</p>"},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.RAM.save","title":"<code>save: InternalMemory</code>  <code>instance-attribute</code>","text":"<p>Save RAM for persistent game data. Usually found on a game cartridge, backed up by a battery.</p>"},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.RAM.system","title":"<code>system: InternalMemory</code>  <code>instance-attribute</code>","text":"<p>Game system's main RAM for actively used game data like characters, levels, and logic.</p>"},{"location":"reference/retropy/utils/memory/#retropy.utils.memory.RAM.video","title":"<code>video: InternalMemory</code>  <code>instance-attribute</code>","text":"<p>Video RAM (VRAM) for displaying sprites, textures, and other graphics data.</p>"},{"location":"reference/retropy/utils/ptr_array/","title":"ptr_array","text":""},{"location":"reference/retropy/utils/ptr_array/#retropy.utils.ptr_array.foreach","title":"<code>foreach(array, cond)</code>","text":"<p>Loop of arbitrary terminated C array.</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>_Pointer[T]</code> <p>C array</p> required <code>cond</code> <code>Callable[[T], bool]</code> <p>terminate condition</p> required <p>Yields:</p> Name Type Description <code>T</code> <p>element of array</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Iterate over NULL terminated array\n&gt;&gt;&gt; for e in foreach(c_array, lambda e: e):\n&gt;&gt;&gt;     print(e)\n</code></pre> Source code in <code>src/retropy/utils/ptr_array.py</code> <pre><code>def foreach(array: _Pointer[T], cond: Callable[[T], bool]):\n    \"\"\"Loop of arbitrary terminated C array.\n\n    Args:\n        array (_Pointer[T]): C array\n        cond (Callable[[T], bool]): terminate condition\n\n    Yields:\n        T: element of array\n\n    Examples:\n        &gt;&gt;&gt; # Iterate over NULL terminated array\n        &gt;&gt;&gt; for e in foreach(c_array, lambda e: e):\n        &gt;&gt;&gt;     print(e)\n    \"\"\"\n    i = 0\n    v: T = array[i]\n    while cond(v):\n        yield v\n        i += 1\n        v = array[i]\n</code></pre>"},{"location":"reference/retropy/utils/savestate/","title":"savestate","text":""},{"location":"reference/retropy/utils/savestate/#retropy.utils.savestate.Savestate","title":"<code>Savestate</code>","text":"<p>Saves complete state of emulator to later return to.</p> Source code in <code>src/retropy/utils/savestate.py</code> <pre><code>class Savestate:\n    \"\"\"Saves complete state of emulator to later return to.\"\"\"\n\n    data: Array[c_ubyte]\n    \"\"\"Emulator state in bytes as ctypes array\"\"\"\n    size: c_size_t\n    \"\"\"Length of `data`\"\"\"\n\n    def __init__(self, size: int = None):\n        \"\"\"Initialized a savestate.\n\n        Args:\n            size (int, optional): Number of bytes of buffer. Defaults to None.\n        \"\"\"\n        if size:\n            self.size = c_size_t(size)\n            self.data = (c_ubyte * size)()\n        else:\n            self.size = None\n\n    def write(self, path: str):\n        \"\"\"Write savestate to file\n\n        Args:\n            path (str): Path to file\n        \"\"\"\n        with open(path, \"wb\") as f:\n            f.write(self.data)\n\n    def read(self, path: str) -&gt; \"Savestate\":\n        \"\"\"Read savestate from file\n\n        Args:\n            path (str): Path to file\n\n        Returns:\n            Savestate: loaded state information\n        \"\"\"\n        with open(path, \"rb\") as f:\n            f.seek(0, os.SEEK_END)\n            self.size = f.tell()\n            f.seek(0, os.SEEK_SET)\n            self.data = (c_ubyte * self.size).from_buffer_copy(f.read())\n\n        return self\n</code></pre>"},{"location":"reference/retropy/utils/savestate/#retropy.utils.savestate.Savestate.data","title":"<code>data: Array[c_ubyte]</code>  <code>instance-attribute</code>","text":"<p>Emulator state in bytes as ctypes array</p>"},{"location":"reference/retropy/utils/savestate/#retropy.utils.savestate.Savestate.size","title":"<code>size: c_size_t</code>  <code>instance-attribute</code>","text":"<p>Length of <code>data</code></p>"},{"location":"reference/retropy/utils/savestate/#retropy.utils.savestate.Savestate.__init__","title":"<code>__init__(size=None)</code>","text":"<p>Initialized a savestate.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>Number of bytes of buffer. Defaults to None.</p> <code>None</code> Source code in <code>src/retropy/utils/savestate.py</code> <pre><code>def __init__(self, size: int = None):\n    \"\"\"Initialized a savestate.\n\n    Args:\n        size (int, optional): Number of bytes of buffer. Defaults to None.\n    \"\"\"\n    if size:\n        self.size = c_size_t(size)\n        self.data = (c_ubyte * size)()\n    else:\n        self.size = None\n</code></pre>"},{"location":"reference/retropy/utils/savestate/#retropy.utils.savestate.Savestate.read","title":"<code>read(path)</code>","text":"<p>Read savestate from file</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to file</p> required <p>Returns:</p> Name Type Description <code>Savestate</code> <code>Savestate</code> <p>loaded state information</p> Source code in <code>src/retropy/utils/savestate.py</code> <pre><code>def read(self, path: str) -&gt; \"Savestate\":\n    \"\"\"Read savestate from file\n\n    Args:\n        path (str): Path to file\n\n    Returns:\n        Savestate: loaded state information\n    \"\"\"\n    with open(path, \"rb\") as f:\n        f.seek(0, os.SEEK_END)\n        self.size = f.tell()\n        f.seek(0, os.SEEK_SET)\n        self.data = (c_ubyte * self.size).from_buffer_copy(f.read())\n\n    return self\n</code></pre>"},{"location":"reference/retropy/utils/savestate/#retropy.utils.savestate.Savestate.write","title":"<code>write(path)</code>","text":"<p>Write savestate to file</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to file</p> required Source code in <code>src/retropy/utils/savestate.py</code> <pre><code>def write(self, path: str):\n    \"\"\"Write savestate to file\n\n    Args:\n        path (str): Path to file\n    \"\"\"\n    with open(path, \"wb\") as f:\n        f.write(self.data)\n</code></pre>"},{"location":"reference/retropy/utils/video/","title":"video","text":""},{"location":"reference/retropy/utils/video/#retropy.utils.video.Frame","title":"<code>Frame = np.ndarray | List[List[Tuple[int, int, int]]]</code>  <code>module-attribute</code>","text":"<p>Type alias for video frame</p>"},{"location":"reference/retropy/utils/video/#retropy.utils.video.buffer_to_frame","title":"<code>buffer_to_frame(data, shape, format, numpy=True)</code>","text":"<p>Convert void* array into usable python list / np array.</p> <p>Uses <code>Height x Width x Channels</code> convention.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>c_void_p</code> <p>Data received by core</p> required <code>shape</code> <code>Tuple[int, int, int]</code> <p>Shape of buffer (height, width, pitch)</p> required <code>format</code> <code>PixelFormat</code> <p>color format for raw buffer</p> required <code>numpy</code> <code>bool</code> <p>If numpy should be used. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Frame</code> <code>Frame</code> <p>Converted video frame</p> Source code in <code>src/retropy/utils/video.py</code> <pre><code>def buffer_to_frame(\n    data: c_void_p,\n    shape: Tuple[int, int, int],\n    format: PixelFormat,\n    numpy: bool = True,\n) -&gt; Frame:\n    \"\"\"Convert void* array into usable python list / np array.\n\n    Uses `Height x Width x Channels` convention.\n\n    Args:\n        data (c_void_p): Data received by core\n        shape (Tuple[int, int, int]): Shape of buffer (height, width, pitch)\n        format (PixelFormat): color format for raw buffer\n        numpy (bool, optional): If numpy should be used. Defaults to True.\n\n    Returns:\n        Frame: Converted video frame\n    \"\"\"\n    if format == PixelFormat.XRGB8888:\n        ptr = cast(data, POINTER(c_uint32))\n        width_p = shape[2] // 4\n    else:\n        ptr = cast(data, POINTER(c_uint16))\n        width_p = shape[2] // 2\n\n    if numpy:\n        frame = np.ctypeslib.as_array(ptr, shape=(shape[0], width_p))[\n            0 : shape[0], 0 : shape[1]\n        ]\n        frame = np.dstack(pixel_to_rgb(frame, format)).astype(np.uint8)\n    else:\n        frame = []\n        for h in range(shape[0]):\n            frame.append([])\n            for w in range(shape[1]):\n                pixel: int = ptr[h * width_p + w]\n                frame[h].append(pixel_to_rgb(pixel, format))\n\n    return frame\n</code></pre>"},{"location":"reference/retropy/utils/video/#retropy.utils.video.pixel_to_rgb","title":"<code>pixel_to_rgb(pixel, format)</code>","text":"<p>Splits single pixel value into RGB channels</p> <p>Parameters:</p> Name Type Description Default <code>pixel</code> <code>int | ndarray</code> <p>single pixel value or whole np frame</p> required <code>format</code> <code>PixelFormat</code> <p>color format for raw buffer</p> required <p>Returns:</p> Type Description <code>ndarray | Tuple[int, int, int]</code> <p>np.ndarray | Tuple[int, int, int]: RGB values of single pixel or whole frame if numpy</p> Source code in <code>src/retropy/utils/video.py</code> <pre><code>def pixel_to_rgb(\n    pixel: int | np.ndarray, format: PixelFormat\n) -&gt; np.ndarray | Tuple[int, int, int]:\n    \"\"\"Splits single pixel value into RGB channels\n\n    Args:\n        pixel (int | np.ndarray): single pixel value or whole np frame\n        format (PixelFormat): color format for raw buffer\n\n    Returns:\n        np.ndarray | Tuple[int, int, int]: RGB values of single pixel or whole frame if numpy\n    \"\"\"\n\n    # 0x1F = 0b00011111\n    # 0x3F = 0b00111111\n    # 0xFF = 0b11111111\n\n    if format == PixelFormat.RGB1555:\n        red = ((pixel &gt;&gt; 10) &amp; 0x1F) &lt;&lt; 3\n        green = ((pixel &gt;&gt; 5) &amp; 0x1F) &lt;&lt; 3\n        blue = (pixel &amp; 0x1F) &lt;&lt; 3\n    elif format == PixelFormat.RGB565:\n        red = ((pixel &gt;&gt; 11) &amp; 0x1F) &lt;&lt; 3\n        green = ((pixel &gt;&gt; 5) &amp; 0x3F) &lt;&lt; 2\n        blue = (pixel &amp; 0x1F) &lt;&lt; 3\n    else:  # format == PixelFormat.XRGB8888:\n        red = (pixel &gt;&gt; 16) &amp; 0xFF\n        green = (pixel &gt;&gt; 8) &amp; 0xFF\n        blue = pixel &amp; 0xFF\n\n    return (red, green, blue)\n</code></pre>"},{"location":"reference/retropy/utils/input/","title":"input","text":"<p>Module contains abstractions for input devices.</p>"},{"location":"reference/retropy/utils/input/base/","title":"base","text":""},{"location":"reference/retropy/utils/input/base/#retropy.utils.input.base.InputDevice","title":"<code>InputDevice</code>","text":"<p>Base device interface from which every input device should inherit.</p> Source code in <code>src/retropy/utils/input/base.py</code> <pre><code>class InputDevice:\n    \"\"\"Base device interface from which every input device should inherit.\"\"\"\n\n    state: dict[str, int | float]\n\n    def __init__(self):\n        self.reset()\n\n    def __getitem__(self, key: str) -&gt; int | float:\n        \"\"\"Get input device's action value.\n\n        Args:\n            key (str): Input name.\n\n        Returns:\n            int | float: Action value. Integers for discrete- and floats for continuous values.\n        \"\"\"\n        return self.state[key]\n\n    def __setitem__(self, key: str, value: int | float):\n        \"\"\"Set input device's action value.\n\n        Args:\n            key (str): Input name.\n            value (int | float): Action value. Should be in range [-1, 1].\n        \"\"\"\n        self.state[key] = value\n\n    def reset(self):\n        \"\"\"Resets state of device i.e. sets all inputs to zero.\"\"\"\n        ...\n\n    def get_state(self, device: int, index: int, id: int) -&gt; int:\n        \"\"\"Get state of action using libretro's API convention.\n\n        Note:\n            Conversion to correct value should be handled based of action.\n\n        Args:\n            device (int): Device ID.\n            index (int): Device Index ID.\n            id (int): Device Button ID.\n\n        Returns:\n            int: State of action.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"reference/retropy/utils/input/base/#retropy.utils.input.base.InputDevice.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Get input device's action value.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Input name.</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>int | float: Action value. Integers for discrete- and floats for continuous values.</p> Source code in <code>src/retropy/utils/input/base.py</code> <pre><code>def __getitem__(self, key: str) -&gt; int | float:\n    \"\"\"Get input device's action value.\n\n    Args:\n        key (str): Input name.\n\n    Returns:\n        int | float: Action value. Integers for discrete- and floats for continuous values.\n    \"\"\"\n    return self.state[key]\n</code></pre>"},{"location":"reference/retropy/utils/input/base/#retropy.utils.input.base.InputDevice.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>Set input device's action value.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Input name.</p> required <code>value</code> <code>int | float</code> <p>Action value. Should be in range [-1, 1].</p> required Source code in <code>src/retropy/utils/input/base.py</code> <pre><code>def __setitem__(self, key: str, value: int | float):\n    \"\"\"Set input device's action value.\n\n    Args:\n        key (str): Input name.\n        value (int | float): Action value. Should be in range [-1, 1].\n    \"\"\"\n    self.state[key] = value\n</code></pre>"},{"location":"reference/retropy/utils/input/base/#retropy.utils.input.base.InputDevice.get_state","title":"<code>get_state(device, index, id)</code>","text":"<p>Get state of action using libretro's API convention.</p> Note <p>Conversion to correct value should be handled based of action.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>int</code> <p>Device ID.</p> required <code>index</code> <code>int</code> <p>Device Index ID.</p> required <code>id</code> <code>int</code> <p>Device Button ID.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>State of action.</p> Source code in <code>src/retropy/utils/input/base.py</code> <pre><code>def get_state(self, device: int, index: int, id: int) -&gt; int:\n    \"\"\"Get state of action using libretro's API convention.\n\n    Note:\n        Conversion to correct value should be handled based of action.\n\n    Args:\n        device (int): Device ID.\n        index (int): Device Index ID.\n        id (int): Device Button ID.\n\n    Returns:\n        int: State of action.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/retropy/utils/input/base/#retropy.utils.input.base.InputDevice.reset","title":"<code>reset()</code>","text":"<p>Resets state of device i.e. sets all inputs to zero.</p> Source code in <code>src/retropy/utils/input/base.py</code> <pre><code>def reset(self):\n    \"\"\"Resets state of device i.e. sets all inputs to zero.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/retropy/utils/input/gamepad/","title":"gamepad","text":""},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePad","title":"<code>GamePad</code>","text":"<p>             Bases: <code>InputDevice</code></p> <p>Input device resembling all modern game controller.</p> <p>Two C-Sticks, 2x2 Shoulder Buttons, 4 Action Buttons, 4 Directional Buttons.</p> Source code in <code>src/retropy/utils/input/gamepad.py</code> <pre><code>class GamePad(InputDevice):\n    \"\"\"Input device resembling all modern game controller.\n\n    Two C-Sticks, 2x2 Shoulder Buttons, 4 Action Buttons, 4 Directional Buttons.\n    \"\"\"\n\n    threshold: float = 0.5\n\n    def get_state(self, device: int, index: int, id: int) -&gt; int:\n        if device == Device.JOYPAD:\n            # this is done as a hack to keep the dict smaller\n            name = RETRO_INPUT_TO_STR[AnalogIdx.BUTTONS][id]\n\n            # (-inf, threshold]: 0\n            # ( threshold, inf): 1\n            return int(self.state[name] &gt; self.threshold)\n\n        elif device == Device.ANALOG:\n            name = RETRO_INPUT_TO_STR[index][id]\n\n            # [-0x7FFF, 0x7FFF]\n            return int(self.state[name] * 0x7FFF)\n        else:\n            raise ValueError(f\"device ({device})\")\n\n    def reset(self):\n        self.state = {}\n\n        for input in GamePadInput:\n            self.state[input] = 0.0\n</code></pre>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput","title":"<code>GamePadInput</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Based on Nintendo\u00a9 button layout</p> Source code in <code>src/retropy/utils/input/gamepad.py</code> <pre><code>class GamePadInput(StrEnum):\n    \"\"\"Based on Nintendo\u00a9 button layout\"\"\"\n\n    LEFT_X = \"LEFT_X\"\n    \"\"\"Left Control Stick - Horizontal \u2194\"\"\"\n    LEFT_Y = \"LEFT_Y\"\n    \"\"\"Left Control Stick - Vertical \u2195\"\"\"\n    RIGHT_X = \"RIGHT_X\"\n    \"\"\"Right Control Stick - Horizontal \u2194\"\"\"\n    RIGHT_Y = \"RIGHT_Y\"\n    \"\"\"Right Control Stick - Vertical \u2195\"\"\"\n    B = \"B\"\n    \"\"\"B Button\"\"\"\n    Y = \"Y\"\n    \"\"\"Y Button\"\"\"\n    START = \"START\"\n    \"\"\"START Button\"\"\"\n    SELECT = \"SELECT\"\n    \"\"\"SELECT Button\"\"\"\n    UP = \"UP\"\n    \"\"\"Directional Pad - Up \u2191\"\"\"\n    DOWN = \"DOWN\"\n    \"\"\"Directional Pad - Down \u2193\"\"\"\n    LEFT = \"LEFT\"\n    \"\"\"Directional Pad - Left \u2192\"\"\"\n    RIGHT = \"RIGHT\"\n    \"\"\"Directional Pad - Right \u2190\"\"\"\n    A = \"A\"\n    \"\"\"A Button\"\"\"\n    X = \"X\"\n    \"\"\"X Button\"\"\"\n    L1 = \"L1\"\n    \"\"\"Left Shoulder Button\"\"\"\n    R1 = \"R1\"\n    \"\"\"Right Shoulder Button\"\"\"\n    L2 = \"L2\"\n    \"\"\"Left Shoulder Trigger\"\"\"\n    R2 = \"R2\"\n    \"\"\"Right Shoulder Trigger\"\"\"\n    L3 = \"L3\"\n    \"\"\"Left Control Stick - Press\"\"\"\n    R3 = \"R3\"\n    \"\"\"Right Control Stick - Press\"\"\"\n</code></pre>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.A","title":"<code>A = 'A'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.B","title":"<code>B = 'B'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>B Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.DOWN","title":"<code>DOWN = 'DOWN'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directional Pad - Down \u2193</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.L1","title":"<code>L1 = 'L1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Shoulder Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.L2","title":"<code>L2 = 'L2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Shoulder Trigger</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.L3","title":"<code>L3 = 'L3'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Control Stick - Press</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.LEFT","title":"<code>LEFT = 'LEFT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directional Pad - Left \u2192</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.LEFT_X","title":"<code>LEFT_X = 'LEFT_X'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Control Stick - Horizontal \u2194</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.LEFT_Y","title":"<code>LEFT_Y = 'LEFT_Y'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Control Stick - Vertical \u2195</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.R1","title":"<code>R1 = 'R1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Shoulder Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.R2","title":"<code>R2 = 'R2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Shoulder Trigger</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.R3","title":"<code>R3 = 'R3'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Control Stick - Press</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.RIGHT","title":"<code>RIGHT = 'RIGHT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directional Pad - Right \u2190</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.RIGHT_X","title":"<code>RIGHT_X = 'RIGHT_X'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Control Stick - Horizontal \u2194</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.RIGHT_Y","title":"<code>RIGHT_Y = 'RIGHT_Y'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Control Stick - Vertical \u2195</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.SELECT","title":"<code>SELECT = 'SELECT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>SELECT Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.START","title":"<code>START = 'START'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>START Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.UP","title":"<code>UP = 'UP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directional Pad - Up \u2191</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.X","title":"<code>X = 'X'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X Button</p>"},{"location":"reference/retropy/utils/input/gamepad/#retropy.utils.input.gamepad.GamePadInput.Y","title":"<code>Y = 'Y'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Y Button</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This section is intended to get the user going with retropy.</p> <p>Throughout this section, the two variables are assumed to be present and valid.</p> <pre><code>dll_path = \"path/to/core.*\" # path to libretro core\nrom_path = \"path/to/rom.*\"  # path to valid rom\n</code></pre>"},{"location":"tutorials/customization/","title":"Customization","text":"<p>retropy is designed to be extensible. This is done by inheriting the <code>RetroPy</code> class.</p> <pre><code>class MyCustomRetroPy(RetroPy):\n    ...\n</code></pre>"},{"location":"tutorials/frontends/","title":"Frontends","text":""},{"location":"tutorials/frontends/#gymnasium","title":"Gymnasium","text":"<p>Frontend implementing <code>gymnasium</code>'s API (formerly <code>gym</code>).</p> <p>Particularly useful for AI applications, especially in reinforcement learning. Additional details can be found in the documentation.</p> <pre><code>from retropy.frontends import RetroPyGym\n\nenv = RetroPyGym(dll_path)\n\nterminated, truncated = False, False\nobs, info = env.reset()\n\nwhile not terminated and not truncated:\n    action = ...\n\n    obs, reward, terminated, truncated, info = env.step(action)\n\nenv.close()\n</code></pre>"},{"location":"tutorials/frontends/#interactive","title":"Interactive","text":"<p>If your primary goal is to play retro games, I strongly recommend using player-focused frontends like RetroArch. Interactive frontends within retropy are implemented to showcase its capabilities and for debugging purposes.</p>"},{"location":"tutorials/frontends/#pygame","title":"Pygame","text":"<p>Frontend using pygame. No audio support due to the way pygame handles audio.</p> <pre><code>from retropy.frontends import RetroPyGame\n\ncore = RetroPyGame(dll_path)\n\ncore.load(rom_path)\n\ncore.run()\n</code></pre>"},{"location":"tutorials/frontends/#pyglet","title":"Pyglet","text":"<p>Frontend using pygame. Maybe audio support?</p> <pre><code>from retropy.frontends import RetroPyGlet\n\ncore = RetroPyGlet(dll_path)\n\ncore.load(rom_path)\n\ncore.run()\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Getting started","text":""},{"location":"tutorials/getting-started/#load-core","title":"Load core","text":"<pre><code>from retropy import RetroPy\n</code></pre>"},{"location":"tutorials/getting-started/#load-game","title":"Load game","text":"<p>...</p>"},{"location":"tutorials/getting-started/#run-core","title":"Run core","text":""},{"location":"tutorials/getting-started/#input","title":"Input","text":"<pre><code>from retropy import Device, Joypad, Analog\n\n...\n\nplayer = 0\ncore.controller[player].set_state(Device.JOYPAD, 0, Joypad.A, 1)\ncore.controller[player].set_state(Device.ANALOG, Analog.LEFT_STICK, Analog.X, 0x9FFF)\n</code></pre>"},{"location":"tutorials/getting-started/#savestates","title":"Savestates","text":"<pre><code>from retropy.utils.savestate import Savestate\n\n...\n\nsave = core.save_state()            # create a savestate\n\nsave.write(\"./save.svt\")            # write savestate to file\n\ncore.reset()                        # reset core\n\ndel save                            # delete savestate for demonstrational purposes\n\nsave = Savestate().load(\"save.svt\") # load savestate from file\n\ncore.load_state(save)               # load previous savestate\n</code></pre>"},{"location":"tutorials/getting-started/#complete-code","title":"Complete code","text":"<pre><code>from retropy import RetroPy\n\ncore = RetroPy(dll_path)\n\ncore_info = core.system_info()\n\ncore.load(rom_path)\n\ngame_info = core.system_av_info()\n\nfor _ in range(1):\n    frame = core.frame_advance()\n</code></pre>"}]}